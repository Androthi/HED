// HED types and macros
		
	#macro toOutput ( _parms_[]): __parms, __counter, __buildstr;
		?__parms := @elements( _parms_);
		?__counter := 0;
		?__buildstr := "str.put ( stringbuffer, ";
		#while ( __counter < __parms-1 )
			?__buildstr += _parms_[__counter]+ ", ";
			?__counter += 1;
		#endwhile
		?__buildstr += _parms_[__counter] + ");";
		@text (__buildstr);
		WriteOutput ( stringbuffer );
	#endmacro
	
	#macro getStringInput ( parms[] );
		returns (
		{
			hla.overload( parms );
			
				hla.signature( getStringInput2( string, string ) )
				hla.signature( getStringInput3( string, string, string ) )
	
			hla.endoverload;
		}, "EAX")
	#endmacro
	
	#macro strToBA( _theStr_, _bufSize_ ): _i_, _ch_;
	 
	 #if( @length( _theStr_ ) <= _bufSize_ )
	 
	  ?_i_ := 0;
	  [
	   #for( _ch_ in _theStr_ )
	 
	    @byte( _ch_ )
	    #if( _i_ < (_bufSize_-1) )
	     ,
	    #endif
	    ?_i_ += 1;
	 
	   #endfor
	  
	   #while( _i_ < (_bufSize_-1) )
	    0,
	    ?_i_ += 1;
	   #endwhile
	 
	   #if( @length( _theStr_ ) < _bufSize_ )
	    0
	   #endif
	  ]
	 
	 #else
	 
	  #error
	  (
	   "String constant must be less than ",
	   _bufSize_,
	   " chars long"
	  )
	  [ _bufSize_ dup [0]]
	 
	 #endif
	 
	#endmacro

const

	iniesi	:text := "(type tConfig[esi])";
	iniedx	:text := "(type tConfig[edx])";
	inieax	:text := "(type tConfig[eax])";
	iniebx	:text := "(type tConfig[ebx])";

	listebx	:text := "(type fList.fnode[ebx])";
	listedx	:text := "(type fList.fnode[edx])";
	listeax	:text := "(type fList.fnode[eax])";
	listecx	:text := "(type fList.fnode[ecx])";
	listesi	:text := "(type fList.fnode[esi])";
	
type

	tCORE:
		record
			// handles
			hout			:dword;
			houtedt			:dword;
			hinst			:dword;
			hwnd			:dword;
			htab			:dword;
			hpaneltab		:dword;
			htaboldproc		:dword;
			hlinefont		:dword;
			hmainfont		:dword;
			hitalic			:dword;		
			hdialogfont		:dword;
			hexplorer		:dword;
			hexplorertree	:dword;
			hfind			:dword;
			hmenu			:dword;
			hVSplitBar		:dword;
			hHSplitBar		:dword;
			hHsplitcursor	:dword;
			hVsplitcursor	:dword;
			hsbr			:dword;
			
			// data
			tci				:w.TC_ITEM;
			col				:RACOLOR;

			// string data
			projectpath		:string;
			configmain		:string;
			homepath		:string;

		endrecord;
	

	WINPOS:	//window position
		record
			fmax	:dword;	// maximized state for some windows; current distance from mainwindow edge for bars.
			x		:dword;
			y		:dword;
			wt		:dword;
			ht		:dword;
		endrecord;
	
	EDITOPTS:
		record
			options		:dword;		// bit-set options for various HED features
			winview		:dword;		// keeps track of which windows are visible and/or docked
			edtwin		:WINPOS;	// saves position of main window
			outwin		:WINPOS;	// saves position of undocked output window
			explorerwin	:WINPOS;
			hsplitbar	:WINPOS;	// saves position of long horizontal split bar
			vsplitbar	:WINPOS;	// saves position of long vertical split bar
			panelwin	:dword;		// keeps track of which panel window is active
			panelactive	:dword;		// handle of current panel window
			findscope	:dword;		// where to search
			findflags	:dword;		// determines direction, flags
			tab			:uns8;
		endrecord;
	
		fList	:class inherits (tBaseList);
			type
				fnode :record inherits( baseNode_t );
			
					id			:string;			// name + extension of file
					union
						fullname	:string;		// full path for orphan files or
						relative	:string;		// path releative to  for project files
					endunion;
					
					hwnd		:dword;				// attached handle for RAEDIT window
					oldhwnd		:dword;				// subclassed proc
					writetime	:qword;		
					align(4);
				endrecord;
				
			override procedure create; @external;
			override method destroy; @external;
			override method remove; @external;
			
			method newNode; @returns ("EAX"); @external;
			method appendFile (id:string); @returns ("EAX"); @external;
			method findFullname (id:string); @returns ("EAX"); @external;
			method findID (id:string); @returns ("EAX"); @external;
			method dumpList; @external;
		endclass;
		
	EDIT_CLASS:
		record
			hwnd		:dword;		//Handle of main window
			fstyle		:dword;		//Window style
			ID			:dword;		//Window ID
			hpar		:dword;		//Handle of parent window
			edta		:dword[12];	//RAEDT <>
			edtb		:dword[12];	//RAEDT <>
			hhscroll	:dword;		//Handle of horizontal scrollbar
			hgrip		:dword;		//Handle of sizegrip
			hnogrip		:dword;		//Handle of nosizegrip
			hsbtn		:dword;		//Handle of splitt button
			hlin		:dword;		//Handle of linenumber button
			hexp		:dword;		//Handle of expand button
			hcol		:dword;		//Handle of collapse button
			hsta		:dword;		//Handle of state window
			htt			:dword;		//Handle of tooltip
			fresize		:dword;		//Resize in action flag
			fsplitt		:dword;		//Splitt factor
			nsplitt		:dword;		//Splitt height
		
			hHeap		:dword[3];	//Handle of heap
			hLine		:dword;		//Handle of line pointer mem
			cbLine		:dword;		//Size of line pointer mem
			rpLine		:dword;		//Relative pointer into line pointer mem
			rpLineFree	:dword;		//Pointer to free line pointer
			hChars		:dword;		//Handle of character mem
			cbChars		:dword;		//Size of character mem
			rpChars		:dword;		//Relative pointer into character mem
			rpCharsFree	:dword;		//Relative pointer to free character
			hUndo		:dword;		//Handle of undo memory
			cbUndo		:dword;		//Size of undo memory
			rpUndo		:dword;		//Relative pointer to free (last)
			line		:dword;		//Linenumber
			cpLine		:dword;		//Character position for start of line
		
			rc			:hide.rect_t;//Main rect
			selbarwt	:dword;		//Width of selection bar
			nlinenrwt	:dword;		//Initial width of linenumber bar
			linenrwt	:dword;		//Width of linenumber bar
			nScroll		:dword;		//Mouse wheel scroll lines
			nPageBreak	:dword;		//Page break
			cpMin		:dword;		//Selection min
			cpMax		:dword;		//Selection max
			fOvr		:dword;		//Insert / Overwrite
			nHidden		:dword;		//Number of hidden lines
			cpx			:dword;		//Scroll position
			focus		:dword;		//Handle of edit having focus
			fCaretHED	:dword;		//Caret is hidden
			fChanged	:dword;		//Content changed
			fHEDSel	:dword;		//HED selection
			fIndent		:dword;		//Auto indent
			clr			:RACOLOR;
			br			:dword[7];	//RABRUSH <?>
			nTab		:dword;		//Tab size
			fnt			:RAFONT;
			fntinfo		:dword[9];	//RAFONTINFO <?>
			lpBmCB		:dword;		//Bookmark paint callback
			nchange		:dword;		//Used by EN_SELCHANGE
			nlastchange	:dword;		//Used by EN_SELCHANGE
			nWordGroup	:dword;		//Hilite word group
			fExpandTab	:dword;		//TRUE/FALSE Epand tabs to spaces
			savesel		:w.CHARRANGE;
			htlt		:dword;		//Scroll tooltip
		endrecord;

	BOOL		:dword;
