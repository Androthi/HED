unit OutputUnit;
	
	#includeonce ("HED.hhf")
	
	?@nodisplay :=true;
	?@align:=4;


storage
	htimer			:dword;

procedure CloseOutputTimer(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
begin CloseOutputTimer;
	w.KillTimer(core.hout,201);
	w.SendMessage(core.hout,w.WM_CLOSE,0,0);
	mov (0, htimer);
end CloseOutputTimer;

procedure CloseOutputDelay(ntime:dword);
begin CloseOutputDelay;
	w.SetTimer(core.hout,201,ntime,&CloseOutputTimer);
	mov (eax, htimer);
end CloseOutputDelay;

procedure CancelTimer (htime:dword);
begin CancelTimer;
	if (htime) then
		w.KillTimer (core.hout, htime);
		mov (0, htimer);
	endif;
end CancelTimer;

procedure CancelTimerCloseOutput; @noframe;
begin CancelTimerCloseOutput;
	w.KillTimer( core.hout, htimer );
	mov( 0, htimer );
	w.SendMessage( core.hout, w.WM_CLOSE, 0, 0 );
	ret();
end CancelTimerCloseOutput;

procedure Output_View ( message:dword);
begin Output_View;
	mov(message,eax);
	
	if (eax = w.SW_HED) then
		w.CheckMenuItem(core.hmenu,IDM_VIEW_OUTPUT,w.MF_BYCOMMAND);
		w.ShowWindow(core.hout,w.SW_HED);
		w.ShowWindow(core.hVSplitBar,w.SW_HED);
		and(! (VSPLIT), settings.winview);
		and(! (OUTPUT), settings.winview);
			
	elseif (eax = w.SW_SHOW) then
		w.CheckMenuItem(core.hmenu,IDM_VIEW_OUTPUT,w.MF_BYCOMMAND |w.MF_CHECKED);
		w.ShowWindow(core.hout,w.SW_SHOW);
		or(OUTPUT,settings.winview);
		w.ShowWindow(core.hVSplitBar,w.SW_SHOW);
		or(VSPLIT,settings.winview);
	endif;
	
	w.SendMessage(core.hwnd,w.WM_SIZE,0,0);
	w.SetFocus (core.hwnd);
  
end Output_View;

procedure Proc_Output (lparam:dword; wparam:dword; umsg:uns32; hwin:dword);

	var		chrg	:w.CHARRANGE;
	
begin 	Proc_Output;
	pushabi;
		mov(umsg,eax);
		cmp(eax,w.WM_SIZE);
		je _size;
		cmp(eax,w.WM_INITDIALOG);
		je _init;
		cmp(eax,w.WM_CLOSE);
		je _close;
		cmp(eax,w.WM_DESTROY);
		je _destroy;
		cmp(eax,w.WM_MOUSEACTIVATE);
		je _activate;
		jmp xProc_Output;
		
	_size:
			w.GetClientRect(hwin, &rect);
			mov	(rect.bottom,eax);
			sub	(rect.top,eax);
			w.MoveWindow( core.houtedt, 0, rect.top, rect.right, eax, true );
			call _savepos;
			w.InvalidateRect(core.hout,NULL,true);
			jmp xProc_Output;
		
	_init:	
			mov(hwin,eax);
			mov(eax,core.hout);
			w.CreateWindowEx(w.WS_EX_CLIENTEDGE, RAEditClassName,NULL,w.WS_CHILD |
						STYLE_NOSPLITT | STYLE_NOLINENUMBER | STYLE_NOCOLLAPSE | STYLE_NOHILITE | STYLE_NODIVIDERLINE,
						0,0,0,0,hwin,NULL,core.hinst,NULL);
			mov(eax,core.houtedt);
	
			mov(core.hmainfont,rafnt.hFont);
			mov(core.hitalic,rafnt.hIFont);
			mov(core.hlinefont,rafnt.hLnrFont);

			w.SendMessage(core.houtedt,REM_SETFONT,0,&rafnt);
			w.SendMessage(core.houtedt,REM_SETCOLOR,0,&core.col);
			w.ShowWindow(core.houtedt,w.SW_SHOWNA);		
			
			w.SetParent(core.hout,core.hwnd);
			test(OUTPUT,settings.winview);
			if(@nz) then
				Output_View(w.SW_SHOW);
			endif;
			
			w.SetWindowText(core.hout, "Output");
			jmp xProc_Output;
	
	_activate:
		CancelTimer (htimer);
		w.SetForegroundWindow(core.hwnd);
		jmp xProc_Output;
	
	_destroy:
			call _savepos;
			jmp xProc_Output;
			
	_close:
			call _savepos;	
			Output_View( w.SW_HED);
			w.SendMessage(core.hwnd,w.WM_SIZE,0,0);			

		
xProc_Output:
	mov(false,eax);
	popabi;		
	exit Proc_Output;
		
// local procs
_savepos:
	
		w.GetWindowRect(hwin,&rect);
		mov(rect.left,settings.outwin.x);
		mov(rect.top,settings.outwin.y);
		mov(rect.right,eax);
		sub(rect.left,eax);
		mov(eax,settings.outwin.wt);
		mov(rect.bottom,eax);
		sub(rect.top,eax);
		mov(eax,settings.outwin.ht);
		ret();

end 		Proc_Output;

procedure WriteOutput ( _msg_:string);
begin WriteOutput;
USE (esi, edi, eax, ecx, ebx, edx);

	if (testz (OUTPUT, settings.winview)) then
		w.SendMessage( core.hwnd, HED_TOGGLEOUTPUT,0,5000);
	endif;
	SendStr	(core.houtedt, w.EM_REPLACESEL, false, _msg_ );

ENDUSE;
end WriteOutput;

end OutputUnit;
