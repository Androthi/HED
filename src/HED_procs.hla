unit HED_procs;

	#includeonce ("HED.hhf")
	#includeonce ("memory.hhf")
	
	?@nodisplay:=true;
	?@noalignstack := true;
	?@align:=4;
	
	storage
		align(4);
		split			:dword;
		getStringRec:
			record
				title	:string;
				init	:string;
				dest	:string;
			endrecord;

procedure Proc_VSplit(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
var
	_max	:dword;
	_min	:dword;
	pt		:hide.point_t;


begin Proc_VSplit;
		
	mov(umsg,eax);
	cmp(eax,w.WM_LBUTTONDBLCLK);
	je _retfalse;
	cmp(eax,w.WM_LBUTTONDOWN);
	je _lbuttondown;
	cmp(eax,w.WM_LBUTTONUP);
	je _lbuttonup;
	cmp(eax,w.WM_MOUSEMOVE);
	je _mousemove;
	// float defproc
_defproc:
	w.CallWindowProc(Proc_OldVSplit, hwin,umsg,wparam,lparam);
	Exit Proc_VSplit;

_lbuttondown:
	w.SetCapture(hwin);
	w.SetCursor(core.hHsplitcursor);
	mov(true,split);
	jmp _retfalse;
	
_lbuttonup:
	w.ReleaseCapture();
	mov(false,split);
	w.SendMessage(core.hwnd,w.WM_SIZE,0,0);
	w.UpdateWindow(hwin);
	jmp _retfalse;
	
_mousemove:
	w.SetCursor(core.hHsplitcursor);
	cmp(split,true);
	jne _retfalse;
	w.GetCursorPos(pt);
	w.ScreenToClient(core.hwnd,pt);

	w.GetClientRect(core.hwnd,&rect);
	
	// check for panel
	if( settings.panelwin != panel_closed ) then
		// get the verticle splitbar border
		mov( settings.hsplitbar.x, eax );
		mov( eax, rect.right );
	else
		sub( TABHT, rect.right );
	endif;
		
	mov(rect.bottom,eax);
	mov(eax,ecx);
	shr(3,eax);
	mov(eax,_min);
	sub(eax,ecx);
	mov(ecx,_max);

	// check limits
	mov(pt.y,eax);
	cmp(eax,_max);
	jle _checkminlimit;
	mov(_max,eax);
	jmp _limitok;
_checkminlimit:
	cmp(eax,_min);
	jge _limitok;
	mov(_min,eax);
_limitok:
	mov(eax,pt.y);
	w.MoveWindow(hwin,0,pt.y,rect.right,3,true);
	mov(pt.y,settings.vsplitbar.y);
	mov(rect.right,settings.vsplitbar.wt);
		
_retfalse:
	xor(eax,eax);
	exit Proc_VSplit;
	
end Proc_VSplit;

procedure Proc_HSplit(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
var
	_max	:dword;
	_min	:dword;
	pt		:hide.point_t;
	_rect	:hide.rect_t;

begin Proc_HSplit;
	mov(umsg,eax);
	cmp(eax,w.WM_LBUTTONDBLCLK);
	je _retfalse;
	cmp(eax,w.WM_LBUTTONDOWN);
	je _lbuttondown;
	cmp(eax,w.WM_LBUTTONUP);
	je _lbuttonup;
	cmp(eax,w.WM_MOUSEMOVE);
	je _mousemove;

	// float defproc
_defproc:
	w.CallWindowProc(Proc_OldHSplit, hwin,umsg,wparam,lparam);
	Exit Proc_HSplit;
	
_lbuttondown:
	w.SetCapture(hwin);
	w.SetCursor(core.hVsplitcursor);
	mov(true,split);
	jmp _retfalse;
	
_lbuttonup:
	w.ReleaseCapture();
	mov(false,split);
	w.SendMessage(core.hwnd,w.WM_SIZE,0,0);
	w.UpdateWindow(hwin);
	jmp _retfalse;
	
_mousemove:
	w.SetCursor(core.hVsplitcursor);
	cmp(split,true);
	jne _retfalse;

	w.GetCursorPos(pt);
	w.ScreenToClient(core.hwnd,pt);

	w.GetClientRect(core.hwnd,&rect);
	sub (TABHT, rect.right);
	call _getworkheight;		// modifies &rect to consider other windows

	mov(rect.right,eax);
	mov(eax,ebx);
	shr(4,eax);
	sub(eax,ebx);
	mov(ebx,_max);
	mov(eax,_min);

	// check limits
	mov(pt.x,eax);
	cmp(eax,_max);
	jle _checkminlimit;
	mov(_max,eax);
	jmp _limitok;
_checkminlimit:
	cmp(eax,_min);
	jge _limitok;
	mov(_min,eax);
_limitok:
	mov(eax,pt.x);
	mov(eax,settings.hsplitbar.x);
	w.MoveWindow(hwin,pt.x,rect.top,3,rect.bottom,true);
	mov(rect.bottom,settings.hsplitbar.ht);
	mov(rect.right,eax);
	sub(pt.x,eax);
	mov(eax,settings.hsplitbar.fmax);		// current distance from client right.
		
_retfalse:
	xor(eax,eax);
	exit Proc_HSplit;

_getworkheight:
	test(TOOL,settings.winview);
	_if(@nz)
		w.GetWindowRect(core.htbr,_rect);
		mov(_rect.bottom,eax);
		sub(_rect.top,eax);
		add(eax,rect.top);
	_endif;
	test(STATUS,settings.winview);
	_if(@nz)
		w.GetWindowRect(core.hsbr,_rect);
		mov(_rect.bottom,eax);
		sub(_rect.top,eax);			// get height of statusbar
		sub(eax,rect.bottom);	// shrink the main client area from bottom
	_endif;
	ret();
	
end Proc_HSplit;

procedure Proc_Goto(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
@nostackalign;
	var
		_chrg		:w.CHARRANGE;
		_scrap		:dword;
	endvar;
	
begin Proc_Goto;
	mov(umsg,eax);
	cmp(eax,w.WM_INITDIALOG);
	je _init;
	cmp(eax,w.WM_COMMAND);
	je _command;
	cmp(eax,w.WM_CLOSE);
	je _close;
	jmp _xProc_Goto;
	
_command:
	mov(wparam,eax);
	cmp(eax,w.IDCANCEL);
	je _closecom;
	
	_gotoline:
		w.GetDlgItemInt(hwin,ID_GOTO_EDT,_scrap,false);
		if(eax) then
		USE (EBX);
			dec(eax);
			mov (curnode, ebx);
			w.SendMessage(listebx.hwnd,w.EM_LINEINDEX,eax,0);
			mov(eax,_chrg.cpMin);
			mov(eax,_chrg.cpMax);
			lea(eax,_chrg);
			w.SendMessage(listebx.hwnd, w.EM_EXSETSEL,0,eax);
			w.SendMessage(listebx.hwnd, REM_VCENTER,0,0);
			w.SendMessage(listebx.hwnd, w.EM_SCROLLCARET,0,0);
		ENDUSE;
		endif;
		jmp _xProc_Goto;
			
	_closecom:
		w.SendMessage(hwin,w.WM_CLOSE,0,0);
		jmp _xProc_Goto;
	
_init:
	w.GetDlgItem(hwin,ID_GOTO_EDT);
	w.SetFocus(eax);
	jmp _xProc_Goto;
		
_close:
	w.EndDialog(hwin,wparam);
	// fall
_xProc_Goto:
	mov	(false, eax);

end Proc_Goto;

procedure Proc_GetString (lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
begin Proc_GetString;
	mov (umsg, eax);
	if (eax = w.WM_INITDIALOG) then
		push (ebx);
		w.SetWindowText (hwin, getStringRec.title);
		w.GetDlgItem(hwin,IDC_EDT_TARGET);
		mov (eax, ebx);
		if ( getStringRec.init > 0 ) then
			w.SendMessage (ebx, w.WM_SETTEXT, 0, getStringRec.init);
			w.SendMessage (ebx, w.EM_SETSEL, 0, -1); 
		endif;

		w.SetFocus(ebx);
		pop (ebx);

	elseif (eax = w.WM_COMMAND) then
		mov(wparam,eax);
		if (eax = w.IDOK) then

			w.GetDlgItemTextA (hwin, IDC_EDT_TARGET, &buffer, @elements (buffer)-1);
			str.cpyz (&buffer, getStringRec.dest);
			w.SendMessage(hwin,w.WM_CLOSE,1,0);		// return true in wparam
			
		elseif (eax = w.IDCANCEL) then
			mov (0, (type byte buffer[0]));
			w.SendMessage(hwin,w.WM_CLOSE,0,0);		// return false in wparam
			
		endif;

	elseif (eax = w.WM_CLOSE) then
		w.EndDialog(hwin,wparam);

	endif;	
	xor (eax, eax);
end Proc_GetString;


procedure getStringInput2 (title:string; dest:string);
	var
		s	:string;
		
begin getStringInput2;
	//dbg.put ("getstring input");
	mov (str.talloc (1024), s);
	mov (title, eax);
	mov (eax, getStringRec.title);
	mov (s, eax);
	mov (eax, getStringRec.dest);
	mov (0, getStringRec.init);	
	w.DialogBoxParam (core.hinst,val ID_GETSTRINGINPUT, core.hwnd, &Proc_GetString, 0);
	if (eax) then
		str.cpy (s, dest);
	endif;
	
end getStringInput2;

procedure getStringInput3 (title:string; initial:string; dest:string);
	var
		s	:string;
		
begin getStringInput3;
	mov (str.talloc (1024), s);
	push (title);
	pop (getStringRec.title);
	push (s);
	pop (getStringRec.dest);
	push (initial);
	pop (getStringRec.init);
	w.DialogBoxParam (core.hinst,val ID_GETSTRINGINPUT, core.hwnd, &Proc_GetString, 0);
	if (eax) then
		str.cpy (s, dest);
	endif;
	
end getStringInput3;


end HED_procs;
