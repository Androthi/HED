unit Make_Unit;

#includeonce ("HED.hhf")
#includeonce ("fileio.hhf")
#includeonce ("math.hhf")
#includeonce ("memory.hhf")
#includeonce ("excepts.hhf")
 
?@nodisplay:=true;
?@align:=4;

storage
	align(4);
	nprocesses	:uns32;
	nerrors		:uns32;
	sat			:w.SECURITY_ATTRIBUTES;
	startinfo	:w.STARTUPINFO;
	pinfo		:w.PROCESS_INFORMATION;
	outputchanged	:boolean;
	align(4);

	buildOpt	:dword;

const
	PIPE_MEM	:= $100000;
	BUF_SIZE		:=2000;		// buffer for output window

proc

	Exec :procedure( source: string );
	begin Exec;
	#if (os.win32)

		dbg.put ("exec :", source);
		mem2.fillMem(&pinfo,@size(pinfo),0);
		mem2.fillMem(&startinfo,@size(startinfo),0);
	
		toOutput ( nl "Running... ", source, nl nl);
		dbg.put("Creating process : ",source);
		
		w.CreateProcess(NULL, source, NULL,NULL, true, NULL, NULL, NULL,&startinfo, &pinfo);
		
		if (eax) then
			toOutput ( "Process Created" nl nl);
			w.CloseHandle(pinfo.hProcess);
			w.CloseHandle(pinfo.hThread);
			
		else			
			w.GetLastError();
			error.syserror (eax);
			toOutput ("Could not execute file" nl nl);
		endif;
		
	#else

		os2.sysexec (source);

	#endif
	end Exec;

	pipeExec :procedure( source:string );
		var
			_buffer	:char[4092];
			return	:dword;
			hwrite		:dword;
			hread		:dword;
	
	begin pipeExec;
		
		//dbg.put("pipeExec :", source );
		// create pipe for output redirection to houtedt
		mov (0, return);
		inc (nprocesses);
	
		mem2.fillMem(&pinfo,@size(pinfo),0);
		mem2.fillMem(&startinfo,@size(startinfo),0);
	
		mov(@size(w.SECURITY_ATTRIBUTES),sat.niLength);
		mov(NULL,sat.lpSecurityDescriptor);
		mov(true,sat.bInheritHandle);
	
		dbg.put("piping :", source);
		//verbOut ("=> ", source, nl);
		w.CreatePipe(hread,hwrite,&sat,PIPE_MEM);
		
		if (eax) then
	
			mov(@size(w.STARTUPINFO),startinfo.cb);
			mov(hwrite,eax);
			mov(eax,startinfo.hStdOutput);
			mov(eax,startinfo.hStdError);
			mov(w.STARTF_USESHOWWINDOW | w.STARTF_USESTDHANDLES,startinfo.dwFlags);
			mov(w.SW_HIDE,startinfo.wShowWindow);
			
			filesys.gwd( stringbuffer );
			dbg.put(" PIPE path :", stringbuffer, nl, "source :", source );
			
			w.CreateProcess(NULL, source, NULL,NULL, true, NULL,NULL,NULL,&startinfo, &pinfo);
			
			if (eax) then
		
				// process creation ok
				dbg.put ("waiting for process completion...");
				w.WaitForSingleObject(pinfo.hProcess,w.INFINITE);
				w.GetExitCodeProcess( pinfo.hProcess, return );
				w.CloseHandle(pinfo.hProcess);
				w.CloseHandle(pinfo.hThread);
				w.CloseHandle (hwrite);
				try
					forever
						fileio.read (hread, _buffer, @size(_buffer)-1);
						mov (0, _buffer[eax]);
						lea (eax, _buffer);
						SendStr	(core.houtedt, w.EM_REPLACESEL, false, eax );
					endfor;
				anyexception
				endtry;
			else
				
				w.GetLastError();
				mov (eax, return);
				error.syserror (eax);
				w.CloseHandle(hwrite);
				
			endif;
			
			w.CloseHandle (hread);
			
		else
			
			w.GetLastError();
			mov (eax, return);
			error.syserror (eax);
			
		endif;
			
		mov (return, eax);
		if (eax) then
			inc (nerrors);
			toOutput ("Return :", (type uns32 eax), nl);
		endif;
		
	end pipeExec;
	
	setOutputView :procedure {@noframe};
	begin setOutputView;
		
		if( testz (OUTPUT, settings.winview) ) then

			// open the output window and mark is as changed
			// to toggle it back later.
			mov( true, outputchanged );
			w.SendMessage( core.hwnd, HED_TOGGLEOUTPUT, 0, 0 );
			
		else
			
			mov( false, outputchanged );
			
		endif;
		
		ret();
	end setOutputView;

	launchProgram :procedure( path:string; useoutput:boolean; clear:boolean );
	begin launchProgram;
		
		setOutputView();
		
		if( clear ) then
			w.SendMessage( core.houtedt, w.WM_SETTEXT, 0, 0 );
		endif;
		
		if( useoutput ) then
			
			pipeExec( path );
			
		else
			
			Exec( path );
			
		endif;
		
		push( eax );
		if( outputchanged ) then
			
			CloseOutputDelay( 5000 );
			
		endif;
		pop( eax );
		
	end launchProgram;

	GetFileTime :procedure ( file:string; var dest:qword);
	begin GetFileTime;
		push5;
		mov (dest, eax);
		mov (0, (type dword[eax]));
		mov (0, (type dword[eax+4]));
		#if (os.win32)
			try
				if (fileio.open (file, fileio.r)) then
					mov (eax, ebx);
					mov (dest, eax);
					w.GetFileTime( ebx, NULL, NULL, [eax]);
					fileio.close (ebx);
					or (1, eax);
				else
					xor (eax, eax);
				endif;
			anyexception;
				xor (eax, eax);
			endtry;
		
		#elseif (os.linux)
			linux.stat (file, timebuf);
			mov (dest, eax);
			mov (timebuf.st_mtime, ebx);
			mov (ebx, [eax]);
		
		#endif
		pop5;
	end GetFileTime;

	checkVarTimes :procedure (srcTime:qword; destTime:qword);
		// return true if destTime is newer than srcTime
	begin checkVarTimes;
		mov (( type dword srcTime[4]), eax );
		cmp ( eax, (type dword destTime[4]) );
		if (@a) then
			mov (false, eax);
			jmp done;
		endif;
	
		if (@b) then
			mov (true, eax);
			jmp done;
		endif;
		
		// if equal, check to LO dword	
		next:
		mov ((type dword srcTime[0]), eax );
		mov ((type dword destTime[0]), ecx);
		cmp (eax, (type dword destTime[0]) );
		if (@b) then
			mov (true, eax);
		else
			mov (false, eax);
		endif;
		done:
	end checkVarTimes;
	
	checkFileTimes :procedure (src:string; dest:string);
	
		// check src and dest last modified times
		// if dest is newer than source, return true.
		var
			srcTime		:qword;
			destTime	:qword;
	
	begin checkFileTimes;
		//dbg.put ("checkFileTimes");
		GetFileTime (src, srcTime);
		GetFileTime (dest, destTime);
		checkVarTimes (srcTime, destTime);
		//dbg.put ("/checkFileTimes >", eax);
	end checkFileTimes;


procedure MakeProc (command:dword; dparam:dword; wparam:dword);
begin MakeProc;
	
	toOutput ("TODO: make proc commands" nl);

end MakeProc;

end Make_Unit;
