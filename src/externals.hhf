
proc
	//hide.hla
	Proc_SubclassedEdit		:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword ); @external;
	expandPathMacs			:procedure( source:string; dest:string ); @external;
	UpdateMenu				:procedure; @external;
	Menu_CloseFile			:procedure; @external;
	HED_openNode			:procedure( var node:fList.fnode ); @external;
	HED_closeNode			:procedure( var node:fList.fnode ); @external;
	HED_selectNode			:procedure( var node:fList.fnode ); @external;
	updateDisplay			:procedure( toupdate:dword ); @external;

	keywordsUpdate	:procedure( hwin:dword ); external;
	writeMessage :procedure( message:zstring ); external;
	launchProgram :procedure( 
					path:string;
					useoutput:boolean;
					clear:boolean ); external;


procedure hed_openFile( fname:string ); @returns ("EAX"); @external;


// keywords
procedure Proc_KeyWords (lparam:dword; wparam:dword; umsg:uns32; hwin:dword);	@external;


// editfunctions
procedure SetKeyWordsByFile(var fname:string); @external;
procedure SetKeyWords(var node:fList.fnode); @external;
procedure saveAll; @external;
procedure closeAll; @external;
procedure querySave (var node:fList.fnode); @returns ("EAX"); @external;
procedure SetWindowCaption;			@external;
procedure GetSelText (var lpBuff:dword);@external;
procedure StreamInProc (var pBytesRead:dword ; NumBytes:dword ; var pBuffer:dword ; hFile:dword);	@external;
procedure StreamOutProc (var pBytesRead:dword ; NumBytes:dword ; var pBuffer:dword ; hFile:dword);	@external;
procedure RAEdit_SaveFile (var node:fList.fnode); @external;
procedure RAEdit_loadFileLight( var node: fList.fnode ); @external;
procedure IndentComment (nChr:dword; fN:dword);		@external;
procedure InitOF (title:string; defext:string);	@external;
procedure GetOpenName;	@returns ("eax"); @external;
procedure GetSaveName;	@returns ("eax"); @external;
procedure GetOpenProjectName;	@returns ("eax");	@external;
procedure WriteToFile (hwin:dword; FileName: string); @external;
procedure RAEdit_new (var node:fList.fnode); @external;
procedure RAEdit_setFormat(var node:fList.fnode); @external;
procedure setFormatAll; @external;
procedure RAEdit_openNew (fname:string); @returns ("EAX"); @external;

procedure selectOpen (id:string); @returns ("EAX"); @external;
procedure selectOpenMem (var node:fList.fnode); @returns ("EAX"); @external;
procedure repaintAll; @external;
procedure RAEdit_open (fname:string); @returns ("EAX"); @external;
procedure Menu_SaveAs; @external;
procedure RAEdit_loadFile (var fnode:fList.fnode; fname:string); @external;
procedure Recent_Insert(source: string); @external;

// find.hhf
procedure Find;		@external;
procedure Proc_FindDlg (lParam:dword; wParam:dword; uMsg:uns32; hWin:dword);	@external;
procedure find_next; @external;
procedure find_prev; @external;
procedure setupFind; @external;

// explorer
procedure Explorer_Reload; @external;


// tabtool
procedure tabtool_activate; @external;
procedure tabtool_add (var node:fList.fnode); @external;
procedure tabtool_getindex (var node:fList.fnode); @returns ("EAX"); @external;
procedure tabtool_update (var node:fList.fnode); @returns ("EAX"); @external;
procedure tabtool_close (var node:fList.fnode); @returns ("EAX"); @external;
procedure tabtool_isOpen( var node:fList.fnode ); @returns("EAX"); @external;
procedure Proc_TabToolSubclass(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);	@external;
procedure PanelSetup (hwin:dword); @external;
procedure PanelFold; @external;
procedure PanelExplorer; @external;
procedure PanelViewWin; @external;
procedure PanelViewActive; @external;
procedure PanelActivate; @external;
procedure Panel_HideDocked; @external;
procedure panel_setfrom; @external;

// output
procedure Proc_Output (lparam:dword; wparam:dword; umsg:uns32; hwin:dword);	@external;
procedure CloseOutputDelay(ntime:dword);	@external;
procedure Output_View (message:dword);	@external;
procedure WriteOutput ( _msg_:string);	@external;
procedure CancelTimerCloseOutput; @external;

procedure Proc_Explorer(lparam:dword; wparam:dword; umsg:uns32; hwin:dword);	@external;
procedure Explorer_View (message:dword); @external;

// make
procedure MakeProc (command:dword; dparam:dword; wparam:dword);	@external;
procedure make_build; @external;
procedure GetFileTime ( file:string; var dest:qword); @external;
procedure checkFileTimes (src:string; dest:string); @returns ("EAX"); @external;
procedure checkVarTimes (srcTime:qword; destTime:qword); @returns ("EAX"); @external;

// error namespace/unit
namespace error;
	procedure fatal(error_string:string);	@external;
	procedure fileopenfailure(error_string:string);	@external;
	procedure warning(error_string:string);	@external;
	procedure syserror ( mid:dword);	@external;
end error;
procedure testalloc(amount:dword);	@external;

// print
procedure PageSetup; 	@external;
procedure PrintDoc;		@external;
procedure initPrinter; @external;

// HED_procs
procedure Proc_HSplit(lparam:dword; wparam:dword; umsg:uns32; hwin:dword); @external;
procedure Proc_VSplit(lparam:dword; wparam:dword; umsg:uns32; hwin:dword); @external;

procedure Proc_Goto(lparam:dword; wparam:dword; umsg:uns32; hwin:dword); @external;
procedure getStringInput2 (title:string; dest:string); @returns ("EAX"); @external;
procedure getStringInput3 (title:string; initial:string; dest:string); @returns ("EAX"); @external;

procedure showAboutWin; @external;

static	// externals
	align(4);
	
		SendStr: procedure ( hwnd:dword; msg:dword; replace:dword; str:string );
			@stdcall; @external( "__imp__SendMessageA@16" ); 
	
		autountitled		:boolean;				@external;		// if true, Untitled is saved and built into temp folder (non-project only)
		settings			:EDITOPTS;				@external;	// general settings				
		rect				:hide.rect_t;			@external;		// generic rect struct
		usrcol				:dword[nUserColors];	@external;
		rafnt				:RAFONT;				@external;
		linefont			:w.LOGFONT;				@external;
		mainfont			:w.LOGFONT;				@external;
		dialogfont			:w.LOGFONT;				@external;

		buffer				:byte[300];				@external ("HED_private_buffer");		// general buffer	
		findbuff			:byte[300];				@external;		// buffer for find dialog
		replacebuf			:byte[300];				@external;		// buffer for replace dialog
		CustColors			:dword[16];				@external;		// storage for custom colors
		pathbuf				:byte[300];				@external;		// keeps track of last directory visited
		
		workpath			:string;				@external;	// a string buffer for working paths
		stringbuffer				:string;				@external;	// scratch static string

		core				:tCORE;					@external;	// HIDE global state
		htimer				:dword; @external;  // 0 = output timer off,  >0 = output timer on
	

		//notes_win		:WINPOS;	@external; // depricated, change to scripts window in future
		mode				:byte;	@external;

		// shared c-string constants
		
		szCmntStart			:byte;					@external;
		szCmntEnd			:byte;					@external;

		Proc_OldVSplit	:dword; @external;
	Proc_OldHSplit	:dword; @external;

	hed_ini			:tConfig; @external;
	hed_default_ini	:tConfig; @external;
	
	fileList	:fList; @external;
	curnode		:pointer to fList.fnode; @external;
	pview_curSel	:dword; @external;
	RAEditClassName		:string; @external;
	commaDelimcst	:cset; @external;
	AppName		:zstring; @external; 
