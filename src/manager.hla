unit manager_unit;

	#includeonce( "HED.hhf" )

	?@nodisplay := true;
	?@noalignstack := true;


storage
	optTab		:dword;
	optEdit		:dword;
	optCurrent	:dword;
	optGeneral	:dword;
	optSettings	:dword;
	optThemes	:dword;
	optEnv		:dword;
	optProject	:dword;
	optJobs		:dword;
	
	optTCI	:w.TC_ITEM;
		
	client_r:hide.rect_t;
	work_r	:hide.rect_t;
	
	fnt		:w.CHOOSEFONT;
	optBuffer	:tBuffer;
	
	count		:uns32;		// scrap variable
	
	newCodeFont		:boolean;
	newLineFont		:boolean;
	linksChanged	:boolean;
	settingsChanged	:boolean;

	align(4);
	
readonly

		
	zEnvHelp	:zstring :=
		"Set custom paths or change default paths" nl
		"HIDE macros are allowed here." nl
		"%h = HIDE home path" nl
		"%$ = current folder path" nl
		"%p = Projects folder path"nl
		"%s = current source file" nl
		"%i = hlainc folder path" nl
		"%l = hlalib folder path" nl
		"%t = current temp folder path" nl
		"%c = current project folder" nl nl
		"Help -> Show Environment shows all the paths with the macros expansions.";
		
	zGeneralHelp	:zstring :=
		"Settings chosen here apply to general HIDE" nl
		"behavior independent from projects settings.";
		
	zSettingsHelp	:zstring :=
		"These settings are for standard mode and" nl
		"govern the initial settings of each newly" nl
		"created project.";
		
		
	zThemesHelp		:zstring :=
		"Setup keywords and color schemes.  Save and" nl
		"load desired theme colors.";
		
	zProjectHelp	:zstring :=
		"Change settings and options for current project." nl
		"These settings are common to all the project Jobs.";

	zJobsHelp		:zstring :=
		"Setup and maintain properties of Project Jobs.";
		
proc
	
	writeMessage :procedure( message:zstring );
	begin writeMessage;
		
		w.SendMessage( optEdit, w.WM_SETTEXT, false, 0 );
		w.SendMessage( optEdit, w.EM_REPLACESEL, 0, message );
		w.SendMessage( optEdit, w.EM_SETSEL, 0, 0 );
		w.SendMessage( optEdit, w.EM_SCROLLCARET, 0, 0 );
		
	end writeMessage;

	
	
	setupForFont	:procedure( hwin:dword );
	begin setupForFont;

		mem2.fillMem( &fnt, @size(fnt), 0 );
		mov( @size(fnt), fnt.lStructSize );
		mov( hwin, fnt.hWndOwner );
		mov( w.CF_SCREENFONTS | w.CF_EFFECTS | w.CF_INITTOLOGFONTSTRUCT, fnt.Flags );
		mov( core.col.txtcol, fnt.rgbColors );
		
	end setupForFont;

	
	Proc_ManagerGen		:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
	begin Proc_ManagerGen;
		pushabi;

		mov( umsg, eax );
		if( eax = w.WM_INITDIALOG ) then
			
			move( hwin, optGeneral );

			hed_ini.readInt( "HED Settings", "AutoUntitled" );
			w.CheckDlgButton( hwin,IDC_MANAGERGEN_AUTOSAVE, eax );
		
			hed_ini.readInt( "HED Settings", "TopWindow" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_TOPWINDOW, eax );
		
			hed_ini.readInt( "HED Settings", "Restore Project" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_OPENLAST, eax );
		
			hed_ini.readInt( "HED Settings", "Highlight Line" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_HIGHLIGHT, eax );
			
			hed_ini.readInt( "HED Settings", "Show Divider" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_SHOWDIVIDER, eax );
			
			hed_ini.readInt( "HED Settings", "Highlight Comments" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_HILITECMNT, eax );

			hed_ini.readInt( "HED Settings", "Show Line Numbers" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_SHOWLNNUM, eax );
			
			hed_ini.readInt( "HED Settings", "Auto Parenthesis" );
			w.CheckDlgButton( hwin, IDC_MANAGERGEN_PAREN, eax );

			or( 1, eax );
			
		elseif( eax = w.WM_COMMAND ) then
			
			mov( wparam, eax );
			mov( eax,edx );
			shr( 16, edx );
			and( $0ffff, eax );
			if( edx = w.BN_CLICKED ) then
				
				if( eax = IDC_MANAGERGEN_MAINFONT ) then
					
					setupForFont( hwin );
					mov( &mainfont, fnt.lpLogFont);
					if( w._ChooseFont( &fnt ) ) then
						mov( true, newCodeFont );
						
					endif;
					
				elseif( eax = IDC_MANAGERGEN_LINEFONT ) then
					
					setupForFont( hwin );
					mov( &linefont, fnt.lpLogFont );
					if( w._ChooseFont( &fnt ) ) then
						mov( true, newLineFont );
					endif;
					
				endif;
				
			endif;
			
			or( 1, eax );

		else
			
			xor( eax, eax );
			
		endif;

		popabi;
	end Proc_ManagerGen;


	Proc_ManagerEnv		:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
		
		var
			in_str	:string;
			
	
	begin Proc_ManagerEnv;
		pushabi;
		
		mov( str.talloc(2000), in_str );
		mov( umsg, eax );
		if( eax = w.WM_INITDIALOG ) then

			move( hwin, optEnv );

			if( hed_ini._readString( "HED Settings", "UserPath", in_str) ) then
				
				w.SetDlgItemText( hwin, IDC_MANAGERENV_PATH, in_str );
				
			endif;
			
			if( hed_ini._readString( "HED Settings", "ProjFold", in_str) ) then
				
				w.SetDlgItemText( hwin, IDC_MANAGERENV_PROJECT, in_str );
			
			endif;
	
			or( 1, eax );
			
		else
			
			xor( eax, eax );
			
		endif;
		
		popabi;
	end Proc_ManagerEnv;


	Proc_ManagerSettings	:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
	
		var
			sbuffer	:string;
			
	
	begin Proc_ManagerSettings;
		
		mov( str.talloc(1000), sbuffer );
		pushabi;
		mov( umsg, eax );
		
		if( eax = w.WM_NOTIFY ) then
			
			mov( true, settingsChanged );
			
		elseif( eax = w.WM_INITDIALOG ) then
			
			mov( hwin, eax );
			mov( eax, optSettings );
			
			// Set range
			w.SendDlgItemMessage( hwin, ID_HIDE_SPNTAB, w.UDM_SETRANGE, 0, $0001_000E );
			movzx( settings.tab, eax );
			w.SendDlgItemMessage( hwin, ID_HIDE_SPNTAB, w.UDM_SETPOS, 0, eax );
			w.SendDlgItemMessage( hwin, ID_HIDE_SPNBACK, w.UDM_SETRANGE, 0, $0000_000A );

			
			if ( testnz (opt_exptabs, settings.options)) then
				mov (true, eax);
			else
				mov (false, eax);
			endif;
			w.CheckDlgButton(hwin,ID_HIDE_EXPTAB,eax);
			
			if (testnz (opt_indent, settings.options)) then
				mov (true, eax);
			else
				mov (false, eax);
			endif;
			w.CheckDlgButton(hwin,ID_HIDE_AUTOIND,eax);
		
		
			if (testnz (opt_console, settings.options)) then
				mov (true, eax);
			else
				mov (false, eax);
			endif;
			w.CheckDlgButton(hwin,ID_HIDE_CONSOLE2OUT, eax);
		
			if (testnz (opt_windows, settings.options)) then
				mov (true, eax);
			else
				mov (false, eax);
			endif;
			w.CheckDlgButton (hwin, ID_HIDE_W, eax);
			or( 1, eax );
			
		else
			
			xor( eax, eax );
			
		endif;
	
		popabi;
	end Proc_ManagerSettings;
	
	updateFolders :procedure;
	
		var
			sbuffer	:string;
			
	begin updateFolders;
		
		mov( str.talloc(1000), sbuffer );
		
		w.SendDlgItemMessage( optProject, IDC_MANAGERPROJ_FOLDERS, w.LB_RESETCONTENT, 0, 0);
		
		str.put( sbuffer, project.id );
		filesys.deleteExt( sbuffer, sbuffer );
		w.SendDlgItemMessage( optProject, IDC_MANAGERPROJ_FOLDERS, w.LB_ADDSTRING, 0, sbuffer );
		w.SendDlgItemMessage( optProject, IDC_MANAGERPROJ_FOLDERS, w.LB_SETCURSEL, eax, 0 );
		
		// user folders
		mov( &project.hpr, esi );
		if( iniesi.getItemCount( "HPR Folders" )) then
			mov( eax, count );
			xor( ebx, ebx );
			while( ebx < count ) do

				iniesi.readItem( "HPR Folders", ebx, sbuffer );
				w.SendDlgItemMessage( optProject, IDC_MANAGERPROJ_FOLDERS, w.LB_ADDSTRING, 0, sbuffer );
				inc (ebx);
				
			endwhile;			
		endif;
		
	end updateFolders;

	
	Proc_ManagerProjOpt	:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
	begin Proc_ManagerProjOpt;
		mov( umsg, eax );
		if( eax = w.WM_COMMAND ) then
			
			mov( wparam, eax );
			mov( eax, edx );
			shr( 16, edx );
			and( $0ffff, eax );
			if( edx = w.BN_CLICKED ) then
				
				if( eax = IDC_MANAGERPROJ_RENAME ) then
					//dbg.enters( "Rename Project" );
					if( getStringInput( "Rename Project To", stringbuffer ) ) then
						
						// rename hpr
						mov (&project.hpr, esi);
						filesys.deleteExt( stringbuffer, stringbuffer );
						str.put2 (stringbuffer, ".hpr");
						iniesi.writeFileName( stringbuffer );
						filesys.delete (project.id);
						str.free( project.id );
						str.a_cpy( stringbuffer );
						mov( eax, project.id );
						
						// rename project folder
						filesys.deleteExt( stringbuffer, stringbuffer );
						str.cpy( project.folder, workpath );
						filesys.extractPath( workpath, workpath );
						str.put2( workpath, dirsep_c, stringbuffer );
						filesys.cd( core.projectpath );
						filesys.rename( project.folder, workpath );
						str.free( project.folder );
						str.a_cpy( workpath );
						mov( eax, project.folder );
						filesys.cd( project.folder );

						w.SetDlgItemText( hwin, IDC_MANAGERPROJ_PATH, project.folder );
						w.SetDlgItemText( hwin, IDC_MANAGERPROJ_NAME, project.id);

						updateFolders();						

						// update hlatmp environment

						mov( &project.hpr, esi );
						if( iniesi.readBool( "HPR Settings", "usetemp") ) then

							str.put( workpath, project.folder, dirsep_c, "temp" );
							env2.put( "hlatmp", workpath );
						
						endif;
						
					endif;
					SetWindowCaption();
					
					//dbg.exits( "Rename Project" );
					
				elseif( eax = IDC_MANAGERPROJ_NEWFOLDER ) then
					
					writeMessage( "TODO: NEW FOLDER" );
					if( getStringInput( "Create new Project folder", stringbuffer ) ) then
						
						if( filesys.exists( stringbuffer ) ) then
							
							writeMessage( "Folder already exists" );
							
						else
							
							filesys.mkdir( stringbuffer );
							
						endif;
						
						mov( &project.hpr, esi );
						if( iniesi.findItem( "HPR Folders", stringbuffer ) = -1 ) then
								
							iniesi.writeItem( "HPR Folders", -1, stringbuffer );
								
						endif;
							
						updateFolders();
						
					endif;
					
					
				elseif( eax = IDC_MANAGERPROJ_DELFOLDER ) then
					
					w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_FOLDERS, w.LB_GETCURSEL, 0, 0 );
					w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_FOLDERS, w.LB_GETTEXT, eax, &buffer );
					str.cpyz( &buffer, workpath );
					if( w.RemoveDirectory (workpath) ) then

						mov( &project.hpr, esi );
						if( iniesi.findItem ("HPR Folders", workpath) != -1) then

							iniesi.deleteItem( "HPR Folders", eax );
							updateFolders();

						endif;

					else

						writeMessage( "Unable to delete folder, make sure it's empty" );
						
					endif;
				endif;
			
			elseif( edx = w.LBN_SELCHANGE ) then
				
				if( eax = IDC_MANAGERPROJ_FOLDERS ) then
					
					w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_FOLDERS, w.LB_GETCURSEL, 0, 0 );
					w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_FOLDERS, w.LB_GETTEXT, eax, &buffer );
					str.cpyz( &buffer, workpath );
					str.cpy( project.id, stringbuffer );
					filesys.deleteExt( stringbuffer, stringbuffer );
					if( ! str.eq (workpath, stringbuffer )) then

						// not root folder, so activate delete button
						w.GetDlgItem( hwin, IDC_MANAGERPROJ_DELFOLDER );
						w.EnableWindow( eax, true );
						
					else
						
						w.GetDlgItem( hwin, IDC_MANAGERPROJ_DELFOLDER );
						w.EnableWindow( eax, false );

					endif;

				endif;
			
			endif;
			or( 1, eax );
			
		elseif( eax = w.WM_INITDIALOG ) then
			move( hwin, optProject );
			w.SetDlgItemText( hwin, IDC_MANAGERPROJ_PATH, project.folder );
			w.SetDlgItemText( hwin, IDC_MANAGERPROJ_NAME, project.id);
			
			// Set range
			w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_UDTABS, w.UDM_SETRANGE, 0, $0001_000E );
			movzx( project.tab, eax );
			w.SendDlgItemMessage( hwin, IDC_MANAGERPROJ_UDTABS, w.UDM_SETPOS, 0, eax );
			
			if( bitSet( opt_exptabs, project.options )) then
				mov( true, eax );
			else
				mov( false, eax );
			endif;
			w.CheckDlgButton( hwin, IDC_MANAGERPROJ_EXPTABS, eax );
			
			if( bitSet( opt_indent, project.options )) then
				mov( true, eax );
			else
				mov( false, eax );
			endif;
			w.CheckDlgButton( hwin, IDC_MANAGERPROJ_AUTOIND, eax );

			updateFolders();
	
			or( 1, eax );
			
		else
			
			xor( eax, eax );
			
		endif;
			
	end Proc_ManagerProjOpt;
	
	saveSettings	:procedure;
	begin saveSettings;
		dbg.put("saveSettings");
		pushad();
		
		mov( 0, buffer[0] );
		
		//==========================================================
		// save general settings
		//==========================================================
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_AUTOSAVE );
		hed_ini.writeInt( "HED Settings", "AutoUntitled", eax );
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_TOPWINDOW );
		hed_ini.writeInt( "HED Settings", "TopWindow", eax );
		if( eax ) then
			w.SetWindowPos(core.hwnd,w.HWND_TOPMOST,0,0,0,0,3);						
		else
			w.SetWindowPos(core.hwnd,w.HWND_NOTOPMOST,0,0,0,0,3);
		endif;

		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_OPENLAST );
		hed_ini.writeInt( "HED Settings", "Restore Project", eax );
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_HIGHLIGHT );
		hed_ini.writeInt( "HED Settings", "Highlight Line", eax );

		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_SHOWDIVIDER );
		hed_ini.writeInt( "HED Settings", "Show Divider", eax );
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_HILITECMNT );
		hed_ini.writeInt( "HED Settings", "Highlight Comments", eax );
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_SHOWLNNUM );
		hed_ini.writeInt( "HED Settings", "Show Line Numbers", eax );
		
		w.IsDlgButtonChecked( optGeneral, IDC_MANAGERGEN_PAREN );
		hed_ini.writeInt( "HED Settings", "Auto Parenthesis", eax );
		
		if( newCodeFont ) then
			
			w.DeleteObject( core.hmainfont );
			mov( mainfont.lfItalic, al );
			push( eax );
			w.CreateFontIndirect( &mainfont );
			mov( eax, core.hmainfont );
			w.DeleteObject( core.hitalic );
			mov( true, mainfont.lfItalic );
			w.CreateFontIndirect( &mainfont );
			mov( eax, core.hitalic );
			pop( eax );
			mov( al, mainfont.lfItalic );
			mov( fnt.rgbColors, core.col.txtcol );
			mov( curnode, eax );
			if( eax ) then
				w.SendMessage( listeax.hwnd, REM_SETCOLOR, 0, &core.col );
			endif;
			setFormatAll();
			
			hed_ini.writeBin( "Fonts", "code", &mainfont, @size(mainfont) );
			hed_ini.writeBin( "Colors", "col", &core.col,@size(core.col) );
			
		endif;

		if( newLineFont ) then
			w.DeleteObject( core.hlinefont );
			w.CreateFontIndirect( &linefont );
			mov( eax, core.hlinefont );
			mov( fnt.rgbColors,core.col.lnrcol );
			mov( curnode, eax );
			if( eax ) then
				w.SendMessage( listeax.hwnd, REM_SETCOLOR, 0, &core.col );
			endif;
			
			setFormatAll();

			hed_ini.writeBin( "Fonts", "line", &linefont, @size(linefont) );
			hed_ini.writeBin( "Colors","col",&core.col, @size(core.col) );

		endif;
		
		//==========================================================
		// save environment settings
		//==========================================================
		
		if( w.GetDlgItemTextA( optEnv, IDC_MANAGERENV_PATH, &buffer, @size(buffer) )) then
			
			env2.get( "PATH", stringbuffer );
			str.cpyz( &buffer, stringbuffer );
			hed_ini.writeString( "HED Settings", "UserPath", stringbuffer );
			expandPathMacs( stringbuffer, stringbuffer );
			str.put2( stringbuffer, ';', core.homepath, dirsep_c, "bin;" );
			env2.put( "PATH", stringbuffer );
			
		else
			
			hed_ini.deleteKey( "HED Settings","UserPath" );
			
		endif;
			
		if( w.GetDlgItemTextA( optEnv, IDC_MANAGERENV_PROJECT, &buffer, @size(buffer) )) then

			str.cpyz( &buffer, stringbuffer );
			hed_ini.writeString( "HED Settings", "ProjFold", stringbuffer );
			expandPathMacs( stringbuffer, stringbuffer );
			str.cpy( stringbuffer, core.projectpath );
			
		else

			hed_ini.deleteKey( "HED Settings", "ProjFold" );
			str.put( core.projectpath, core.homepath, dirsep_c, "Projects" );

		endif;

		
		//==========================================================
		// save colors and themes settings
		//==========================================================
		
		keywordsUpdate( optThemes );
		

		//==========================================================
		// save project settings
		//==========================================================
		
		if( project.isOpen ) then
			
			mov( 0, project.options );

			w.GetDlgItemInt( optProject, IDC_MANAGERPROJ_TABS, null, false );
			mov( al, project.tab );
			
			if( w.IsDlgButtonChecked( optProject, IDC_MANAGERPROJ_EXPTABS ) ) then
				or( opt_exptabs, project.options );
			endif;
			
			if( w.IsDlgButtonChecked( optProject, IDC_MANAGERPROJ_AUTOIND ) ) then
				or( opt_indent, project.options );
			endif;

			mov( &project.hpr, esi );
			iniesi.write( project.id );
			
			TreeToolSetup();

		endif;
		
		//==========================================================
		// save standard mode settings
		//==========================================================
		
		if( settingsChanged ) then
			dbg.put("settigs changed ");
			
			// save standard settings
			mov( 0, settings.options );
		
			w.GetDlgItemInt( optSettings, ID_HIDE_TABSIZE, null, false );
			mov( al, settings.tab );
			
			if( w.IsDlgButtonChecked( optSettings, ID_HIDE_EXPTAB ) ) then
				or( opt_exptabs, settings.options );
			endif;
			
			if( w.IsDlgButtonChecked( optSettings, ID_HIDE_AUTOIND ) ) then
				or( opt_indent, settings.options );
			endif;
	
			if( w.IsDlgButtonChecked( optSettings, ID_HIDE_CONSOLE2OUT ) ) then
				or( opt_console, settings.options );
			endif;
	
			if( w.IsDlgButtonChecked( optSettings, ID_HIDE_W ) ) then
				or( opt_windows, settings.options );
			endif;
			
			movzx( settings.tab, eax );
			hed_ini.writeUns( "HED Settings", "tab", eax );
			hed_ini.writeHex( "HED Settings", "options", settings.options );
			
			
		endif;
		
		hed_ini.writeFileName( core.configmain );		
		setFormatAll();
		
		popad();
	end saveSettings;


	displayTool	:procedure( window:dword );
	begin displayTool;
		
		mov( window, eax );

		switch( eax );
		
		case( manager_general )
			
			writeMessage( zGeneralHelp );
			
			w.MoveWindow( optGeneral, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optGeneral, w.SW_SHOW );
			mov( optGeneral, eax );
			mov( eax, optCurrent );
			
		
		case( manager_env )
			
			writeMessage( zEnvHelp );
			
			w.MoveWindow( optEnv, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optEnv, w.SW_SHOW ); 
			mov( optEnv, eax );
			mov( eax, optCurrent );
			
		case( manager_settings )
			
			writeMessage( zSettingsHelp );
			
			w.MoveWindow( optSettings, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optSettings, w.SW_SHOW ); 
			mov( optSettings, eax );
			mov( eax, optCurrent );
		
		case( manager_themes )
			
			writeMessage( zThemesHelp );

			w.MoveWindow( optThemes, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optThemes, w.SW_SHOW ); 
			mov( optThemes, eax );
			mov( eax, optCurrent );
			
		case( manager_project )
		

			writeMessage( zProjectHelp );

			w.MoveWindow( optProject, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optProject, w.SW_SHOW ); 
			mov( optProject, eax );
			mov( eax, optCurrent );
		
		case( manager_jobs )

			writeMessage( zJobsHelp );

			w.MoveWindow( optJobs, client_r.x, client_r.y, client_r.width, client_r.height, false );
			w.ShowWindow( optCurrent, w.SW_HIDE );
			w.ShowWindow( optJobs, w.SW_SHOW ); 
			mov( optJobs, eax );
			mov( eax, optCurrent );
			
		endswitch;


		
	end displayTool;

	Proc_HIDEManager	:procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );
	begin Proc_HIDEManager;
		
		pushabi;

		mov( umsg, eax );
		if( eax = w.WM_INITDIALOG ) then
			mov( false, linksChanged );
			mov( false, settingsChanged );
			mov( false, newCodeFont );
			mov( false, newLineFont );

			w.GetDlgItem( hwin, IDC_MANAGERTAB );
			mov( eax, optTab );
			w.GetDlgItem( hwin, IDC_MANAGEREDIT );
			mov( eax, optEdit );
			
			w.CreateDialogParam( core.hinst, val ID_MANAGERENV, hwin, &Proc_ManagerEnv, false );
			w.CreateDialogParam( core.hinst, val ID_MANAGERGEN, hwin, &Proc_ManagerGen, false );
			w.CreateDialogParam( core.hinst, val ID_KEYWORDS, hwin, &Proc_KeyWords, false );
			
			dbg.put("params created");
			
			mov( eax, optThemes );
			w.CreateDialogParam( core.hinst,val ID_MANAGERSET, hwin, &Proc_ManagerSettings, false );

			
			if( project.isOpen ) then
				w.CreateDialogParam( core.hinst, val ID_MANAGERPROJ, hwin, &Proc_ManagerProjOpt, false );
			dbg.put("params created 3");				
				w.CreateDialogParam( core.hinst, val ID_MANAGERJOBS, hwin, &Proc_JobsManager, false );
				mov( eax, optJobs );
			endif;
			
			
			
			// fill the tab tool
			mov( w.TCIF_TEXT, optTCI.imask );
			mov(30, optTCI.cchTextMax );

			move( zGeneral, optTCI.pszText );
			w.SendMessage( optTab, w.TCM_INSERTITEM, manager_general, &optTCI );

			move( zEnvironment, optTCI.pszText );
			w.SendMessage( optTab, w.TCM_INSERTITEM, manager_env, &optTCI );
			move( zSettings, optTCI.pszText );
			
			w.SendMessage( optTab, w.TCM_INSERTITEM, manager_settings, &optTCI );
			
			move( zThemes, optTCI.pszText );
			w.SendMessage( optTab, w.TCM_INSERTITEM, manager_themes, &optTCI );

			// project related settings should always be below standard
			// related settings
			if( project.isOpen ) then
				
				move( zProject, optTCI.pszText );
				w.SendMessage( optTab, w.TCM_INSERTITEM, manager_project, &optTCI );
			
				move( zJobs, optTCI.pszText );
				w.SendMessage( optTab, w.TCM_INSERTITEM, manager_jobs, &optTCI );
				
			endif;
			
			w.SendMessage( optTab, w.TCM_SETCURSEL, lparam, 0 );
			
			w.GetClientRect( hwin, &client_r );
			w.GetWindowRect( optTab, &work_r );
			mov( work_r.right, eax );
			sub( work_r.left, eax );
			add( eax, client_r.left );
			
			w.GetWindowRect( optEdit, &work_r );
			mov( work_r.bottom, eax );
			sub( work_r.top, eax );
			sub( eax, client_r.height );
			
			
			mov( 0, optCurrent );
			displayTool( lparam );
			
			or( 1, eax );
			
		elseif( eax = w.WM_COMMAND ) then
			
			mov( wparam, eax );
			mov( eax,edx );
			shr( 16, edx );
			and( $0ffff, eax );
			if( edx = w.BN_CLICKED ) then
				
				if( eax = w.IDOK ) then
					
					//dbg.put( "OK" );
					
					saveSettings();
					w.SendMessage( hwin, w.WM_CLOSE, 0, 0 );
					or( 1, eax );
				
				elseif( eax = w.IDCANCEL ) then
					
					//dbg.put( "CANCEL" );
					
					w.SendMessage( hwin, w.WM_CLOSE, 0, 0 );
					or( 1, eax );
					
				else
					
					xor( eax, eax );
					
				endif;
			
			else
				
				xor( eax, eax );
				
			endif;
	

		elseif( eax = w.WM_NOTIFY ) then
		
			mov( lparam, eax );
			mov( (type w.NMHDR [eax]).hwndFrom, eax );
			if( eax = optTab ) then
				
				w.SendMessage( optTab, w.TCM_GETCURSEL, 0,0 );
				if( eax != -1 ) then
					
					displayTool( eax );
					
				endif;
				
			endif;
			
			or( 1, eax );
			
		elseif( eax = w.WM_SETFOCUS ) then
			
			w.SetFocus (hwin);

		elseif( eax = w.WM_CLOSE ) then
			
			w.EndDialog( hwin, NULL );
			or( 1, eax );

		else
			
			sub( eax, eax );
			
		
		endif;
		
		popabi;
	end Proc_HIDEManager;

	

end manager_unit;
