unit EditFunctions;
#includeonce	("HED.hhf")
#includeonce	("fileio.hhf")
#includeonce	("memory.hhf")

?@nodisplay:=true;
?@align:=4;

readonly

	align(4);
	allfiles:byte; @nostorage;
		byte "All Files (*.*)",0,"*.*",0;
		byte "Text Files (*.txt)",0,"*.txt",0,0;
		
	bftitle		:zstring := "Select a folder to open";
	
endreadonly;

storage
	// local static vars
	align(4);	
	editstream	:w.EDITSTREAM;
	of			:w.OPENFILENAME;
	ofBuffer	:byte[300];
	
	bf			:w.BROWSEINFO;
	bfBuffer	:byte[300];
	bfimage		:int32;
	
procedure GetSelText (var lpBuff:dword);

var
	chrg	:w.CHARRANGE;
	
begin GetSelText;
USE (EBX, EDI);
	//dbg.put ("GetSelText");
	lea(edi,chrg);
	mov (curnode, ebx);
	w.SendMessage(listebx.hwnd, w.EM_EXGETSEL,0,edi);
	mov	(chrg.cpMax,eax);
	sub	(chrg.cpMin,eax);
	lea(lpBuff,edi);
	if (eax && eax < 256) then
		w.SendMessage(listebx.hwnd, w.EM_GETSELTEXT,0,[edi]);
	endif;
	//dbg.put ("/GetSelText");
ENDUSE;
end GetSelText;

procedure SetWindowCaption;
	var
		tm		:qword;
		changed	:BOOL;
		
begin SetWindowCaption;
	pushabi;
	mov (0, changed);
	mov (curnode, ebx);
	str.cpy("", workpath);
	
	if (ebx) then
		
		if (changed) then
			str.put2 (workpath, '*');
			toOutput (nl nl "Warning: File has been modified externally" nl);
		endif;
		str.put2 (workpath, listebx.fullname, "   HED");
	else
		str.cpy( &AppName, workpath );
	endif;
	
	w.SetWindowText (core.hwnd, workpath);
	popabi;
end	SetWindowCaption;

procedure RAEdit_new (var node:fList.fnode);
begin RAEdit_new;
USE (EBX);
	mov (node, ebx);
	mov (w.WS_CHILD | STYLE_SCROLLTIP, eax);
	w.CreateWindowEx(w.WS_EX_CLIENTEDGE, RAEditClassName,NULL,eax,
					0,0,0,0,core.hwnd,NULL,core.hinst,NULL);
	mov (eax, listebx.hwnd);

	// subclass it
	//w.SendMessage (listebx.hwnd, REM_SUBCLASS, 0, &Proc_SubclassedEdit);
	//mov (eax, listebx.oldhwnd);

ENDUSE;
end RAEdit_new;

procedure RAEdit_loadFile (var fnode:fList.fnode; fname:string);
	var
		hfile	:dword;
		_chrg		:w.CHARRANGE;

	// file must already exist before calling this proc.
	// fnode = file node destination
	// fname = file to open
		
begin RAEdit_loadFile;
USE (EBX);
	mov (fnode, ebx);
	dbg.put ("RAEdit_loadFile :", listebx.fullname);
	fileio.open (fname, fileio.r);
	mov (eax, hfile);
	mov (hfile, editstream.dwCookie);
	mov (&StreamInProc, editstream.pfnCallback);
	w.SendMessage (listebx.hwnd, w.EM_STREAMIN, w.SF_TEXT, &editstream);
	fileio.close (hfile);
	w.SendMessage (listebx.hwnd, w.EM_SETMODIFY, false, 0);
	mov (0,_chrg.cpMin);
	mov (0,_chrg.cpMax);
	lea (eax,_chrg);
	w.SendMessage (listebx.hwnd,w.EM_EXSETSEL,0, eax);
	GetFileTime (listebx.fullname, listebx.writetime);
	RAEdit_setFormat ([ebx]);
	dbg.put ("/RAEdit_loadFile");
ENDUSE;	
end RAEdit_loadFile;

procedure RAEdit_loadFileLight( var node: fList.fnode );
	
	var
		hfile	:dword;
		_chrg		:w.CHARRANGE;


begin RAEdit_loadFileLight;
	// node already taken care of, need to create a RAEdit and load the file
	// make it quick since this could be temporary.
	// to make it permanent and visible with a tab tool, send this node to
	// hed_selectNode()
	
	USE( EBX );
	mov( node, ebx );
	if( filesys.exists( listebx.fullname ) ) then
		
		RAEdit_new( node );
		fileio.open( listebx.fullname, fileio.r );
		mov( eax, hfile );
		mov( hfile, editstream.dwCookie );
		mov( &StreamInProc, editstream.pfnCallback );
		w.SendMessage( listebx.hwnd, w.EM_STREAMIN, w.SF_TEXT, &editstream);
		fileio.close( hfile );
		w.SendMessage( listebx.hwnd, w.EM_SETMODIFY, false, 0 );
		mov( 0,_chrg.cpMin );
		mov( 0,_chrg.cpMax );
		lea( eax,_chrg );
		w.SendMessage( listebx.hwnd,w.EM_EXSETSEL,0, eax );
		
	else
		toOutput( "File not found: ", listebx.fullname, nl );
	endif;
	ENDUSE;
end RAEdit_loadFileLight;


procedure RAEdit_openNew (fname:string);
@alignstack;
	// load fname into a new file handle
	// if fname = NULL, then setup as "Untitled"
	// add new file to fileList, return pointer in eax
	var
		s		:string;
		
begin RAEdit_openNew;
	mov (str.talloc (pathsize_c), s);
	USE (EBX, ESI, EDI);
	if (fname = NULL) then
		
		fileList.appendFile ("Untitled");
		mov (eax, ebx);
		RAEdit_new ([ebx]);
		RAEdit_setFormat([ebx]);
		str.a_cpy (listebx.id);
		mov (eax, listebx.fullname);
	else
		str.cpy (fname, s);
		if (filesys.exists (s)) then

			fileList.newNode();
			mov (eax, ebx);
			
			filesys.a_extractFilename( s );
			mov( eax, listebx.id );
			
			str.a_cpy (s);
			mov (eax, listebx.fullname);
			
			filesys.extractExt( s, s );
			str.put2 (s, ".ini");
			str.a_cpy (s);
			mov (eax, listebx.typename);
			
			fileList.append ([ebx]);
			RAEdit_new ([ebx]);
			RAEdit_loadFile ([ebx], listebx.fullname);
		else
			xor (ebx, ebx);
		endif;
	endif;
	mov (ebx, eax);
	ENDUSE;
	dbg.put("/RAEdit_openNew");
end RAEdit_openNew;


procedure RAEdit_open (fname:string);
	// returns file node or NULL
begin RAEdit_open;
	if (! selectOpen (fname)) then
		RAEdit_openNew (fname);
	endif;
	dbg.put("/RAEdit_open");
end RAEdit_open;

proc

	RAEdit_setFormat :procedure( var node:fList.fnode );
		var
			gwstyle	:dword;
			group	:dword;
			options	:dword;

	begin RAEdit_setFormat;
		USE( ebx, edx, esi, edi );
	
		mov (0, gwstyle);
		mov (0, group);
		mov (node, ebx);
	
			// default settings for all source types
			
			w.GetWindowLong(listebx.hwnd,w.GWL_STYLE);
			mov (eax, gwstyle);
			
			move (core.hmainfont, rafnt.hFont);
			move (core.hitalic, rafnt.hIFont);
			move (core.hlinefont, rafnt.hLnrFont);
	
			if (testnz (opt_exptabs, options)) then
				mov (true, eax);
			else
				mov (false, eax);
			endif;
			
			w.SendMessage(listebx.hwnd,REM_TABWIDTH, edx, eax);
			
			if (hed_ini.readBool( "HED", "Line Numbers")) then
				w.CheckDlgButton (listebx.hwnd, -2, true);
				w.SendMessage (listebx.hwnd, w.WM_COMMAND, -2, 0);
			endif;
			
			w.SendMessage(listebx.hwnd,REM_SETFONT,0,&rafnt);
			w.SendMessage(listebx.hwnd,REM_MOUSEWHEEL,3,0);
	
			// TODO: file types autoindent, set here. default is off	
			xor (eax, eax);
			w.SendMessage(listebx.hwnd,REM_AUTOINDENT,0, eax);
	
			//+ TODO: add specifics based on file extension
			// here we will add keywords too
			// SetKeyWords( listebx );
			

			w.SendMessage (listebx.hwnd, REM_ADDBLOCKDEF, 0, 0);	
			or (STYLE_NOHILITE | STYLE_NOCOLLAPSE , gwstyle);
			and (! STYLE_HILITECOMMENT, gwstyle);
			mov (15, group);
			w.SendMessage(listebx.hwnd,REM_SETWORDGROUP,0, group);
			w.SendMessage(listebx.hwnd,REM_SETCOLOR,0,&core.col);
			w.SendMessage(core.hwnd,HED_SETINSERTMODE,0,0);
			w.SetWindowLong(listebx.hwnd,w.GWL_STYLE, gwstyle);

		ENDUSE;	
	end RAEdit_setFormat;

procedure saveFileAs (var node:fList.fnode);
	var
		sbuffer	:string;
		
begin saveFileAs;
	mov(str.talloc(1000), sbuffer);
USE (EBX);
	dbg.put ("saveFileAs");
	mov (node, ebx);
	test( ebx, ebx );
	jz no_node;
	
	cmp( listebx.hwnd, 0 ); je no_node;
	
	if ( str.eq (listebx.id, "Untitled")) then
		Menu_SaveAs();
	endif;
	
	no_node:
ENDUSE;
	dbg.put ("/saveFileAs");
end saveFileAs;


procedure RAEdit_SaveFile (var node:fList.fnode);
begin RAEdit_SaveFile;
	USE (ebx, esi, edi, ecx, edx);
	mov (node, ebx);
	test( ebx, ebx );	jz no_node;
	cmp( listebx.hwnd, 0 );	je no_node;
	WriteToFile (listebx.hwnd, listebx.fullname);
	GetFileTime (listebx.fullname, listebx.writetime);
	updateDisplay( update_general );
	no_node:
	ENDUSE;
	//dbg.put ("/RAEdit_SaveFile");
end RAEdit_SaveFile;

procedure StreamInProc (var pBytesRead:dword ; NumBytes:dword ; var pBuffer:dword ; hFile:dword);
@nostackalign;
begin StreamInProc;
	
	w.ReadFile(hFile,pBuffer,NumBytes,pBytesRead,NULL);
	xor	(1, eax);

end StreamInProc;

procedure StreamOutProc (var pBytesRead:dword ; NumBytes:dword ; var pBuffer:dword ; hFile:dword);
@nostackalign;
begin StreamOutProc;
	
	w.WriteFile(hFile,pBuffer,NumBytes,pBytesRead,NULL);
	xor	(1, eax);

end StreamOutProc;

	
procedure WriteToFile (hwin:dword; FileName: string);
	var
		hfile	:dword;

begin WriteToFile;

	dbg.put ("WriteToFile :", FileName);
	fileio.openNew(FileName);
	if (eax <> 0) then
		mov	(eax, hfile);
		mov	(eax, editstream.dwCookie);
		mov	(&StreamOutProc, editstream.pfnCallback);
		w.SendMessage(hwin, w.EM_STREAMOUT, w.SF_TEXT, &editstream);
		fileio.close(hfile);
		w.SendMessage(hwin, w.EM_SETMODIFY, false, 0);
		mov	(true, eax);
	else
		error.warning("Could not save file");
		mov	(false,eax);
	endif;
	dbg.put ("after writetofile");
end WriteToFile;

procedure Recent_Insert ( source: string);
//	add source to recently opened files list

begin Recent_Insert;
USE (EAX, ESI, EDI);
	dbg.put ("Recent_Insert :", source );
	if (hed_ini.findItem ("Recent Files", source)<> -1 ) then
		//dbg.put ("found");
		hed_ini.deleteItem ("Recent Files", eax);
	endif;
	
	hed_ini.insertItem ("Recent Files", 0, source);
	if (hed_ini.getItemCount ("Recent Files") > 10) then
		hed_ini.deleteItem ("Recent Files", 10);
	endif;
	UpdateMenu();
ENDUSE;
end Recent_Insert;


procedure Proc_InitBrowse (lparam:dword; wparam:dword; umsg:uns32; hwin:dword);
begin Proc_InitBrowse;
	mov (umsg, eax);
	if (eax = w.BFFM_INITIALIZED) then
		dbg.put("yes");
		mov (lparam, eax);
		if ((type byte [eax]) != 0) then
			w.SendMessage( hwin, w.BFFM_SETSELECTION, 1, eax);
			or (1, eax);
			jmp _done;
		endif;
	endif;
	dbg.put ("ret 0");
	xor (eax, eax);
	_done:
end Proc_InitBrowse;


procedure initBF;
begin initBF;
	mov (core.hwnd, bf.hwndOwner);
	mov (NULL, bf.pidlRoot);
	mov (&bfBuffer, bf.pszDisplayName);
	mov (&bftitle, bf.lpszTitle);
  	mov (w.BIF_NEWDIALOGSTYLE, bf.ulFlags);
  	mov (&Proc_InitBrowse, bf.lpfn);
  	mov (&pathbuf, bf.lParam);
  	mov (&bfimage, bf.iImage);
end initBF;


procedure InitOF (title:string; defext:string);
	// initializes the OPENFILENAME structure
begin InitOF;
	pushabi;
	mem2.fillMem(&of, @size(of), 0);
	mov	(@size(of),of.lStructSize);
	pushd(core.hwnd);
	pop	(of.hWndOwner);
	pushd(core.hinst);
	pop(of.hInstance);
	mov	(0,ofBuffer[0]);
	mov	(&ofBuffer, of.lpstrFile);
	mov	(@size(ofBuffer), of.nMaxFile);
	move (title, of.lpstrTitle);
	if (pathbuf[0] <> 0) then
		mov(&pathbuf,eax);
	endif;
	mov(eax,of.lpstrInitialDir);

	mov(defext,eax);
	mov(eax,of.lpstrDefExt);
		
    mov(&allfiles,eax);
	mov(eax,of.lpstrFilter);
	
	mov	(	w.OFN_PATHMUSTEXIST | w.OFN_NOCHANGEDIR | w.OFN_FILEMUSTEXIST |
			w.OFN_HIDEREADONLY | w.OFN_OVERWRITEPROMPT,of.Flags);

	popabi;
end InitOF;

procedure GetSaveName;	@noframe;
	
begin GetSaveName;
	dbg.enters("GetSaveName");
	w.GetSaveFileName(&of);
	if (eax) then
		str.a_cpyz(&ofBuffer);
	else
		xor(eax,eax);	
	endif;
	dbg.exits ("GetSaveName");
	ret();
end GetSaveName;

procedure GetOpenName;	@noframe;
	
begin GetOpenName;
	dbg.put("GetOpenName");
	w.GetOpenFileName(&of);
	if (eax) then
		zstr.cpy(&ofBuffer,&pathbuf);
		str.a_cpyz(&ofBuffer);
	else
		xor(eax,eax);		
	endif;
	ret();
end GetOpenName;

procedure GetOpenFolderName;	@noframe;
begin GetOpenFolderName;

	w.CoInitialize (NULL);
	if (hed_ini._readString ("HED", "Last Path", stringbuffer)) then
		mov (stringbuffer, eax);
		
	endif;
	w.SHBrowseForFolder ( &bf );
	if (eax) then
		push (eax);
		w.SHGetPathFromIDList (eax, &bfBuffer);
		pop (eax);
		w.CoTaskMemFree (eax);
		str.cpyz (&bfBuffer, core.projectpath);
		zstr.cpy (&bfBuffer, &pathbuf);
		dbg.put ("after path :", core.projectpath);
		mov (core.projectpath, eax);
	else
		xor (eax, eax);
	endif;
	push (eax);
	w.CoUninitialize();
	pop (eax);
	ret();
end GetOpenFolderName;

procedure saveAll; @noframe;
	// go through file-list and save all edit controls
	// that have been altered
begin saveAll;
USE (ESI, EDI, EBX, EAX);
	fileList.getHead();
	mov (eax, ebx);
	while (ebx) do
		if( listebx.hwnd != 0 ) then
			if ( w.SendMessage (listebx.hwnd, w.EM_GETMODIFY, 0, 0) ) then
				RAEdit_SaveFile ([ebx]);
			endif;
		endif;
		mov (listebx.next, ebx);
	endwhile;
ENDUSE;
ret();
end saveAll;

procedure setFormatAll;

	var
		count	:uns32;
		

begin setFormatAll;
	// cycle through all open tabs and set format
	USE (EBX, ESI, EDI);
	w.SendMessage (core.htab, w.TCM_GETITEMCOUNT, 0, 0);
	mov (eax, count);
	if (eax) then
		mov	(w.TCIF_PARAM, core.tci.imask);
		while (count >=0) do
			dec (count);
			w.SendMessage (core.htab, w.TCM_GETITEM, count, &core.tci);
			breakif (!eax);
			mov (core.tci.lParam, ebx);
			RAEdit_setFormat( [ebx] );

		endwhile;
	endif;
	ENDUSE;	
end setFormatAll;

procedure closeAll;
	// close all the open tab windows
	var
		count	:uns32;
		
begin closeAll;
	USE (EBX, ESI, EDI);
	w.SendMessage (core.htab, w.TCM_GETITEMCOUNT, 0, 0);
	mov (eax, count);
	if (eax) then
		mov	(w.TCIF_PARAM, core.tci.imask);
		while (count >=0) do
			dec (count);
			w.SendMessage (core.htab, w.TCM_GETITEM, count, &core.tci);
			breakif (!eax);
			mov (core.tci.lParam, ebx);
			breakif (querySave ([ebx]));
			w.SendMessage (core.htab, w.TCM_DELETEITEM, count,0);
			
			w.DestroyWindow (listebx.hwnd);
			

				// also remove from list
				fileList.remove ([ebx]);

		endwhile;
	else
		xor (eax, eax);
	endif;
	if (! eax) then
		mov (0, curnode);
	endif;
	ENDUSE;
end closeAll;

procedure querySave (var node:fList.fnode);

	// see if edit window has changed, ask to save
	// return true in EAX if cancelled.
	
	var
		s	:string;
		
begin querySave;
	mov (str.talloc (pathsize_c), s);
	USE (EBX);
	xor(eax,eax);
	mov (node, ebx);
	if (w.SendMessage (listebx.hwnd, w.EM_GETMODIFY, 0, 0)) then
		str.put (s, "Want to Save Changes to ", listebx.id, '?');
		w.MessageBox (core.hwnd, s, &AppName, w.MB_YESNOCANCEL | w.MB_ICONQUESTION);
		if (eax= w.IDYES) then
			RAEdit_SaveFile ([ebx]);
			mov(false,eax);
			
		elseif (eax = w.IDNO) then
			mov	(false, eax);		// don't save
		else
			mov	(true, eax);		// cancel
		endif;
	else
		mov (false,eax);
	endif;
	ENDUSE;
end querySave;

procedure repaintAll; @noframe;
begin repaintAll;
USE (ESI, EDI, EBX);
	fileList.getHead();
	mov (eax, ebx);
	while (ebx) do
		w.SendMessage (listebx.hwnd, REM_REPAINT, 0, 0);
		mov (listebx.next, ebx);
	endwhile;
ENDUSE;
ret();
end repaintAll;

procedure IndentComment (nChr:dword; fN:dword);
	storage
		ochr	:w.CHARRANGE;
		chr		:w.CHARRANGE;
		LnSt	:dword;
		LnEn	:dword;
		buffer1	:byte[32];

	var	
		LineTxt	:dword;

begin IndentComment;
	
	pushabi;
	mem.alloc(16384);
	mov(eax,LineTxt);
	mov (curnode, ebx);
	
	w.SendMessage(listebx.hwnd,w.WM_SETREDRAW, false,0);
	if (fN) then
		if (nChr = DOUBLESLASH) then
			mov	('/', buffer1[0]);
			mov	('/', buffer1[1]);
		else
			mov	(nChr, eax);
			mov	(eax,(type dword buffer1[0]));
		endif; 
	endif;
	w.SendMessage(listebx.hwnd, w.EM_EXGETSEL,0, &ochr);
	w.SendMessage(listebx.hwnd, w.EM_EXGETSEL,0, &chr);
	w.SendMessage(listebx.hwnd, w.EM_HIDESELECTION,true,0);
	w.SendMessage(listebx.hwnd, w.EM_EXLINEFROMCHAR,0,chr.cpMin);
	mov	(eax, LnSt);
	mov	(chr.cpMax, eax);
	dec	(eax);
	w.SendMessage(listebx.hwnd, w.EM_EXLINEFROMCHAR,0,eax);
	mov	(eax, LnEn);
	
	nxt:
	mov	(LnSt,eax);
	if	(eax <= LnEn) then
		w.SendMessage(listebx.hwnd,w.EM_LINEINDEX, LnSt,0);
		mov	(eax, chr.cpMin);
		inc	(LnSt);
		if	(fN) then
			mov	(eax, chr.cpMax);
			w.SendMessage(listebx.hwnd, w.EM_EXSETSEL,0, &chr);
			w.SendMessage(listebx.hwnd, w.EM_REPLACESEL, true, &buffer1);
			zstr.len(&buffer1);
			add	(eax, ochr.cpMax);
			jmp	nxt;
		else

			w.SendMessage(listebx.hwnd, w.EM_LINEINDEX, LnSt,0);
			mov	(eax, chr.cpMax);
			w.SendMessage(listebx.hwnd, w.EM_EXSETSEL,0,&chr);
			lea (esi, LineTxt);
			w.SendMessage(listebx.hwnd, w.EM_GETSELTEXT,0,[esi]);
			mov	(LineTxt, esi);
			xor	(eax, eax);
			mov	([esi], al);

			mov	([esi+1], ah);
			if(al = '/' && ah = '/') then	// checks for double-slash comments
				add(2, esi);
				w.SendMessage(listebx.hwnd, w.EM_REPLACESEL, true, esi);
				sub(2,ochr.cpMax);
				
			elseif (nChr = $3b) then
				inc (esi);
				w.SendMessage(listebx.hwnd, w.EM_REPLACESEL, true, esi);
				dec (ochr.cpMax);
				
			elseif (nChr = $09) then	// checks for tab-indentation
				movzx (settings.tab, ecx);
				dec (esi);
				l0:
				inc (esi);

				mov	([esi],al);
				cmp (al, ' ');
				jne	l1;
				loop l0;
				l1:
				if	(al = $09) then
					inc	(esi);
					dec	(ecx);
				endif;
				movzx (settings.tab, eax);
				sub	(ecx, eax);
				sub	(eax, ochr.cpMax);
				w.SendMessage(listebx.hwnd, w.EM_REPLACESEL, true, esi);
			endif;
			jmp	nxt;
		endif;
	endif;
	w.SendMessage(listebx.hwnd, w.EM_EXSETSEL,0, &ochr);
	w.SendMessage(listebx.hwnd, w.EM_HIDESELECTION,false, 0);
	w.SendMessage(listebx.hwnd, w.EM_SCROLLCARET,0,0);
	w.SendMessage(listebx.hwnd, w.WM_SETREDRAW,true,0);
	w.SendMessage(listebx.hwnd, REM_REPAINT,0,0);
	
	mem.free(LineTxt);
	popabi;
end IndentComment;

end EditFunctions;
