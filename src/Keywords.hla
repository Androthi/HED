unit Keywords;

#includeonce ("HED.hhf")
#includeonce ("memory.hhf")

?@nodisplay:=true;
?@align:=4;


const	// local constants
			
		nRAcolors	:= 14;
		nColorGroups	:=  nUserColors;
		HoldGroup	:= nColorGroups;

	static 	//local
		align(4);
		// RAcolors = nRAcolors
		RAcolors	:string[ nRAcolors ] :=
			[
				"Background",
				"Text Color",
				"Selected Back",
				"Selected Text",
				"Comments",
				"Strings",
				"Operators",
				"Hilited Line #1",
				"Hilited Line #2",
				"Hilited Line #3",
				"Selection Bar",
				"Selection Bar Pen",
				"Line Numbers",
				"Numbers & Hex"
			];
			
static
	nKWInx		:dword :=0;
	

proc
	SetKeyWordsByFile :procedure ( var fname:string );
	begin SetKeyWordsByFile;
		toOutput ("TODO: Keywords by file");
	end SetKeyWordsByFile;

	
	SetKeyWords :procedure( var node:fList.fnode );
		var
			index		:uns32;
			configini	:pointer to tConfig;
			s			:string;
			temp_s		:string;
			buf			:tBuffer;
			
	begin SetKeyWords;
		pushad();
		dbg.enters( "SetKeyWords" );
		mov( node, edx );
		w.SendMessage(listedx.hwnd,REM_SETHILITEWORDS,0,0);
		mov( 0, index );
		mov( &usrcol, ebx );
		mov( node, edx );
		dbg.exits( "SetKeyWords" );
		popad();
	end SetKeyWords;

/*
	Proc_KeyWords :procedure( lparam:dword; wparam:dword; umsg:uns32; hwin:dword );

		var
			hbr	:dword;
			cc	:w.CHOOSECOLOR;
			ini	:pointer to tConfig;
	
	begin Proc_KeyWords;
		pushabi;
		
		//dbg.put("proc_keywords, nKWInx = ", nKWInx);
		
		mov( umsg, eax );
		switch( eax );
		
		case( w.WM_COMMAND )
		
			mov( wparam, eax );
			mov( eax, edx );
			shr( 16, edx );
			and( $0ffff, eax );
			
			if (edx = w.BN_CLICKED) then
				
				if (eax = IDC_BTNKWAPPLY) then
					dbg.put("apply");
					keywordsUpdate( hwin );
					mov(IDC_BTNKWAPPLY,eax);
					xor(edx,edx);
					call EnButton;
	
				elseif (eax = IDC_BTNHOLD) then
	
					MoveKeyWords(hwin,IDC_LSTKWACTIVE,IDC_LSTKWHOLD);
					mov(IDC_BTNHOLD,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNDEL,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_BTNACTIVE) then
	
					MoveKeyWords(hwin,IDC_LSTKWHOLD,IDC_LSTKWACTIVE);
					mov(IDC_BTNHOLD,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNDEL,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_BTNADD) then
	
					dbg.put("add at index :", nKWInx);
					w.GetDlgItemTextA(hwin,IDC_EDTKW,&minibuf,@size(minibuf));
					w.SendDlgItemMessage(hwin,IDC_LSTKWACTIVE,w.LB_ADDSTRING,0,&minibuf);
					mov(0,minibuf[0]);
					w.SetDlgItemText(hwin,IDC_EDTKW,&minibuf);
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
					mov( true, listChanged );
					
				elseif (eax = IDC_BTNDEL) then
					DeleteKeyWords(hwin,IDC_LSTKWACTIVE);
					mov(IDC_BTNHOLD,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNDEL,eax);
					xor(edx,edx);
					call EnButton;
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_CHKBOLD) then
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETCURSEL,0,0);
					push(eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETITEMDATA,eax,0);
					pop(edx);
					xor($01000000,eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_SETITEMDATA,edx,eax);
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_CHKITALIC) then
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETCURSEL,0,0);
					push(eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETITEMDATA,eax,0);
					pop(edx);
					xor($02000000,eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_SETITEMDATA,edx,eax);
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_CHKRCFILE) then
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETCURSEL,0,0);
					push(eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETITEMDATA,eax,0);
					pop(edx);
					xor($10000000,eax);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_SETITEMDATA,edx,eax);
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
					
				elseif (eax = IDC_CB_LOAD) then
	
					dbg.put ("Load theme");	
					w.SendMessage (hcbthemes, w.CB_GETCURSEL, 0, 0);
					push (eax);
					w.SendMessage (hcbthemes, w.CB_GETITEMDATA, eax, 0);
					if (eax = Theme_System_c) then
						mov (&hed_default_ini, eax);
						mov (eax, ini);
					else
						mov (&hed_ini, eax);
						mov (eax, ini);
					endif;
					
					pop (eax);
					w.SendMessage (hcbthemes, w.CB_GETLBTEXT, eax, &buffer);
					str.cpyz (&buffer, stringbuffer);
					str.put2 (stringbuffer, ".theme");
					//dbg.put ("loading :", stringbuffer);
					ini.readBin (stringbuffer, "col", &core.col, @size(core.col));
					ini.readBin (stringbuffer, "usrcol", &usrcol, @size(usrcol));
					setupLists (hwin);
	
					keywordsUpdate( hwin );
	
					mov(IDC_BTNKWAPPLY,eax);
					mov(true,edx);
					call EnButton;
	
				elseif (eax = IDC_CB_DELETE) then
	
					//dbg.put ("delete theme");
					w.SendMessage (hcbthemes, w.CB_GETCURSEL, 0, 0);
					push (eax);
					w.SendMessage (hcbthemes, w.CB_GETLBTEXT, eax, &buffer);
					pop (eax);
					w.SendMessage (hcbthemes, w.CB_DELETESTRING, eax, 0); 
					
					str.cpyz (&buffer, stringbuffer);
					hed_ini.findItem ("Themes", stringbuffer);
					hed_ini.deleteItem ("Themes", eax);
					str.put2 (stringbuffer, ".theme");
					hed_ini.deleteSection (stringbuffer);
					
				elseif (eax = IDC_CB_SAVE) then
					
					//dbg.put ("save theme");
					keywordsUpdate( hwin );
					w.SendMessage (hcbthemes, w.WM_GETTEXT, @elements (buffer)-1, &buffer);
					w.SendMessage (hcbthemes, w.CB_FINDSTRINGEXACT, -1, &buffer);
					if (eax = w.CB_ERR) then
						w.SendMessage (hcbthemes, w.CB_ADDSTRING, 0, &buffer);
					endif;
					if (eax <> w.CB_ERR) then
						w.SendMessage (hcbthemes, w.CB_SETITEMDATA, eax, Theme_User_c);
						str.cpyz (&buffer, stringbuffer);
						hed_ini.findItem ("Themes", stringbuffer);
						hed_ini.writeItem ("Themes", eax, stringbuffer); // replace or append new
						str.put2 (stringbuffer, ".theme");
						hed_ini.writeBin (stringbuffer, "col", &core.col, @size(core.col));
						hed_ini.writeBin (stringbuffer, "usrcol", &usrcol, @size(usrcol));
	
					endif;				
					
				endif;
				
			elseif (edx = w.EN_CHANGE) then
				
				if (eax = IDC_EDTKW) then
					w.SendDlgItemMessage(hwin,IDC_EDTKW,w.WM_GETTEXTLENGTH,0,0);
					mov(eax,edx);
					mov(IDC_BTNADD,eax);
					call EnButton;
				endif;
	
			elseif (edx = w.LBN_SELCHANGE) then
				
				dbg.put("LBN_SELCHANGE");
				
				if (eax = IDC_LSTKWCOLORS) then
					dbg.put("IDC_LSTKWCOLORS");
					dbg.put("list changed?, index = ", listChanged, " : ", nKWInx);
					if( listChanged ) then
						SaveKeyWordList( hwin,IDC_LSTKWACTIVE, nKWInx );
						mov( false, listChanged );
					endif;
					
					w.SendDlgItemMessage( hwin, IDC_LSTKWCOLORS, w.LB_GETCURSEL, 0, 0 );
					SetKeyWordList( hwin, IDC_LSTKWACTIVE, eax );
					w.GetDlgItem( hwin, IDC_BTNHOLD );
					w.EnableWindow( eax, false );
					w.GetDlgItem( hwin, IDC_BTNDEL );
					w.EnableWindow( eax, false );
					
					//dbg.put ("/selchange");
					
				elseif (eax = IDC_LSTKWACTIVE) then
					dbg.put("IDC_LSTKWACTIVE");
					w.SendDlgItemMessage(hwin,IDC_LSTKWACTIVE,w.LB_GETSELCOUNT,0,0);
					mov( true, listChanged );
					push(eax);
					mov(eax,edx);
					mov(IDC_BTNHOLD,eax);
					call EnButton;
					pop(edx);
					mov(IDC_BTNDEL,eax);
					call EnButton;
					dbg.put("added to :", nKWInx );
		
				elseif (eax = IDC_LSTKWHOLD) then
		
					w.SendDlgItemMessage(hwin,IDC_LSTKWHOLD,w.LB_GETSELCOUNT,0,0);
					mov(eax,edx);
					mov(IDC_BTNACTIVE,eax);
					call EnButton;
		
		
		
				endif;
				dbg.put("/LBN_SELCHANGE");
				
			elseif (edx = w.LBN_DBLCLK) then
	
				if (eax = IDC_LSTKWCOLORS) then
					
					mov(@size(w.CHOOSECOLOR),cc.lStructSize);
					mov(hwin,eax);
					mov(eax,cc.hwndOwner);
					mov(&CustColors,cc.lpCustColors);
					mov(w.CC_FULLOPEN | w.CC_RGBINIT,cc.Flags);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETCURSEL,0,0);
					w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETITEMDATA,eax,0);
					push(eax);
					//Mask off group/font
					and($0FFFFFF,eax);
					mov(eax,cc.rgbResult);
					w._ChooseColor(cc);
					pop(ecx);
					if (testnz (eax, eax)) then
						push(ecx);
						w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_GETCURSEL,0,0);
						pop(ecx);
						mov(cc.rgbResult,edx);
						//Group/Font
						and($0FF000000,ecx);
						or(ecx,edx);
						w.SendDlgItemMessage(hwin,IDC_LSTKWCOLORS,w.LB_SETITEMDATA,eax,edx);
						w.GetDlgItem(hwin,IDC_LSTKWCOLORS);
						w.InvalidateRect(eax,NULL,false);
						mov(IDC_BTNKWAPPLY,eax);
						mov(true,edx);
						call EnButton;
	
					endif;
	
				elseif (eax = IDC_LSTKWACTIVE) then
	
					w.SendDlgItemMessage(hwin,IDC_LSTKWACTIVE,w.LB_GETCURSEL,0,0);
					if (eax <> w.LB_ERR) then
						mov(eax,edx);
						w.SendDlgItemMessage(hwin,IDC_LSTKWACTIVE,w.LB_GETTEXT,edx,&minibuf);
						w.SetDlgItemText(hwin,IDC_EDTKW,&minibuf);
					endif;
						
				elseif (eax = IDC_LSTKWHOLD) then
					w.SendDlgItemMessage(hwin,IDC_LSTKWHOLD,w.LB_GETCURSEL,0,0);
					if (eax <> w.LB_ERR) then
						mov(eax,edx);
						w.SendDlgItemMessage(hwin,IDC_LSTKWHOLD,w.LB_GETTEXT,edx,&minibuf);
						w.SetDlgItemText(hwin,IDC_EDTKW,&minibuf);					
					endif;
	
				elseif (eax = IDC_LSTCOLORS) then
					mov(@size(w.CHOOSECOLOR),cc.lStructSize);
					mov(hwin,eax);
					mov(eax,cc.hwndOwner);
					mov(&CustColors,cc.lpCustColors);
					mov(w.CC_FULLOPEN | w.CC_RGBINIT,cc.Flags);
					w.SendDlgItemMessage(hwin,IDC_LSTCOLORS,w.LB_GETCURSEL,0,0);
					w.SendDlgItemMessage(hwin,IDC_LSTCOLORS,w.LB_GETITEMDATA,eax,0);
					push(eax);
					//Mask off font
					and($0FFFFFF,eax);
					mov(eax,cc.rgbResult);
					w._ChooseColor(cc);
					pop(ecx);
					if (testnz (eax,eax)) then
						push(ecx);
						w.SendDlgItemMessage(hwin,IDC_LSTCOLORS,w.LB_GETCURSEL,0,0);
						pop(ecx);
						mov(cc.rgbResult,edx);
						//Font
						and($0FF000000,ecx);
						or(ecx,edx);
						w.SendDlgItemMessage(hwin,IDC_LSTCOLORS,w.LB_SETITEMDATA,eax,edx);
						w.GetDlgItem(hwin,IDC_LSTCOLORS);
						w.InvalidateRect(eax,null,false);
						mov(IDC_BTNKWAPPLY,eax);
						mov(true,edx);
						call EnButton;
					endif;
				endif;
	
			elseif (edx = w.CBN_EDITCHANGE) then
				 
				 //dbg.put ("EDITCHANGE");
				
				 w.SendMessage (hcbthemes, w.WM_GETTEXT, @elements(buffer)-1, &buffer );
				 if (eax) then
				 	mov (true, edx);
				 else
				 	mov (false, edx);
				 endif;
				 
				 mov( IDC_CB_SAVE, eax );
				 call EnButton;
				 
				 // disable load
				 mov( false, edx );
				 mov( IDC_CB_LOAD, eax );
				 call EnButton;
				 			 
			elseif (edx = w.CBN_SELENDOK) then
				dbg.put ("selok");
				mov (false, edx);
				mov (IDC_CB_SAVE, eax);
				call EnButton;
				w.SendMessage (hcbthemes, w.CB_GETCURSEL, 0, 0);
				w.SendMessage (hcbthemes, w.CB_GETITEMDATA, eax, 0);
				if (eax = Theme_System_c) then
					// disable delete
					mov (false, edx);
					mov (IDC_CB_DELETE, eax);
					call EnButton;
				else
					// user can delete own themes
					mov (true, edx);
					mov (IDC_CB_DELETE, eax);
					call EnButton;
				endif;
				
				// enable load button
				mov (true, edx);
				mov (IDC_CB_LOAD, eax);
				call EnButton;
				
				
			else
				xor (eax, eax);
				popabi;
				exit Proc_KeyWords;
			endif;
			
			or( 1, eax );
		
		case( w.WM_DRAWITEM )
		
			mov( lparam, esi );
			
			if( bitSet( w.ODS_SELECTED,drawesi.itemState) ) then
				
				pushd( w.COLOR_HIGHLIGHT );
				mov( w.COLOR_HIGHLIGHTTEXT, eax );
				
			else
				
				pushd( w.COLOR_WINDOW );
				mov( w.COLOR_WINDOWTEXT, eax );
				
			endif;
			
			w.GetSysColor(eax);
			w.SetTextColor(drawesi.hdc,eax);
			pop(eax);
			w.GetSysColor(eax);
			w.SetBkColor(drawesi.hdc,eax);
			w.ExtTextOut(drawesi.hdc,0,0,w.ETO_OPAQUE,drawesi.rcItem,NULL,0,NULL);
			mov(drawesi.rcItem.left,eax);
			inc(eax);
			mov(eax,rect.left);
			add(25,eax);
			mov(eax,rect.right);
			mov(drawesi.rcItem.top,eax);
			inc(eax);
			mov(eax,rect.top);
			mov(drawesi.rcItem.bottom,eax);
			dec(eax);
			mov(eax,rect.bottom);
			mov(drawesi.itemData,eax);
			and($0FFFFFF,eax);
			w.CreateSolidBrush(eax);
			mov(eax,hbr);
			w.FillRect(drawesi.hdc,&rect,hbr);
			w.DeleteObject(hbr);
			w.GetStockObject(w.BLACK_BRUSH);
			w.FrameRect(drawesi.hdc,&rect,eax);
			w.SendMessage(drawesi.hwndItem,w.LB_GETTEXT,drawesi.itemID,&minibuf);
			mov(drawesi.rcItem.left,edx);
			add(30,edx);
			w.TextOut(drawesi.hdc,edx,drawesi.rcItem.top,&minibuf,eax);

			or( 1, eax );
		
		case( w.WM_CLOSE )
		
			w.EndDialog( hwin, NULL );
			or( 1, eax );
			
		
		default
		
			xor( eax, eax );
		
		endswitch;
		
		popabi;
		exit Proc_KeyWords;
		
		// internal procedures
		EnButton::
			push(edx);
			w.GetDlgItem(hwin,eax);
			pop(edx);
			w.EnableWindow(eax,edx);
			ret();
	
	
	end Proc_KeyWords;
*/
end	Keywords;
